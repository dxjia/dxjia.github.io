<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>挨踢的甘蔗</title>
  <subtitle>憋说话，好好干，你想要的时间都会给你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dxjia.cn/"/>
  <updated>2016-08-09T03:03:30.000Z</updated>
  <id>http://dxjia.cn/</id>
  
  <author>
    <name>dxjia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>将 ffmpeg 编译为 android JNI 库</title>
    <link href="http://dxjia.cn/2016/07/27/how_to_compile_ffmpeg_for_android/"/>
    <id>http://dxjia.cn/2016/07/27/how_to_compile_ffmpeg_for_android/</id>
    <published>2016-07-27T07:14:38.000Z</published>
    <updated>2016-08-09T03:03:30.000Z</updated>
    
    <content type="html">&lt;p&gt;之前有开源了一个 &lt;a href=&quot;https://github.com/dxjia/ffmpeg-compile-shared-library-for-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ffmpeg shared library&lt;/a&gt;，其中是把 ffmpeg 2.6 源码编译为android 平台可用的共享库，在其中只介绍了如何编译，但对于如何将这些共享库转变为 JNI 使用却没有讲太多。本文就着重介绍一下思路，方便后续升级 ffmpeg 版本。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;编译-ffmpeg-共享库&quot;&gt;&lt;a href=&quot;#编译-ffmpeg-共享库&quot; class=&quot;headerlink&quot; title=&quot;编译 ffmpeg 共享库&quot;&gt;&lt;/a&gt;编译 ffmpeg 共享库&lt;/h1&gt;&lt;p&gt;依据 &lt;a href=&quot;https://github.com/dxjia/ffmpeg-compile-shared-library-for-android#使用&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用&lt;/a&gt; 介绍下载 ffmpeg 源码，配置编译脚本进行编译。&lt;br&gt;&lt;code&gt;build_android_arm.sh&lt;/code&gt; 和 &lt;code&gt;build_android_x86.sh&lt;/code&gt; 两个脚本分别是用来编译用于 arm 平台的库文件和 x86 平台的库的，如果你只需要 arm 平台的，那 x86 的可以不用管了。&lt;br&gt;&lt;strong&gt;&lt;code&gt;注意：&lt;/code&gt;每次运行完脚本编译之后，会在 ffmpeg 源码目录下生成一个 config.h 文件，这个也是后续编译 jni 必需的，需要在运行另一个编译脚本之前进行保存， 我这里采用的方式是将 config.h 重命名为不同的名字，在编译 jni 时根据 target 不同引用不同的头文件，即：运行完 &lt;code&gt;build_android_arm.sh&lt;/code&gt; 之后，将 config.h 重命名为 &lt;code&gt;arm_config.h&lt;/code&gt;，运行完 &lt;code&gt;build_android_x86.sh&lt;/code&gt;之后，重命名为 &lt;code&gt;x86_config.h&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;编译-jni&quot;&gt;&lt;a href=&quot;#编译-jni&quot; class=&quot;headerlink&quot; title=&quot;编译 jni&quot;&gt;&lt;/a&gt;编译 jni&lt;/h1&gt;&lt;p&gt;新建一个android项目，并新建一个 library module，也可以直接在你的 app 项目里，看自己的需要了。&lt;/p&gt;
&lt;h2 id=&quot;禁用-android-studio-JNI-自动编译&quot;&gt;&lt;a href=&quot;#禁用-android-studio-JNI-自动编译&quot; class=&quot;headerlink&quot; title=&quot;禁用 android studio JNI 自动编译&quot;&gt;&lt;/a&gt;禁用 android studio JNI 自动编译&lt;/h2&gt;&lt;p&gt;在 你的 &lt;code&gt;build.gradle&lt;/code&gt; 中增加下面几行代码，来禁用 as 对 jni 的自动编译，因为我们需要自己手动编译 jni。参考 &lt;a href=&quot;https://github.com/dxjia/ffmpeg-commands-executor-library/blob/as-version/library/build.gradle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;build.gradle&lt;/a&gt;。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sourceSets.main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jni.srcDirs = [] //disable automatic ndk-build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jniLibs.srcDirs = [&amp;apos;libs&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;准备文件&quot;&gt;&lt;a href=&quot;#准备文件&quot; class=&quot;headerlink&quot; title=&quot;准备文件&quot;&gt;&lt;/a&gt;准备文件&lt;/h2&gt;&lt;h3 id=&quot;Android-mk&quot;&gt;&lt;a href=&quot;#Android-mk&quot; class=&quot;headerlink&quot; title=&quot;Android.mk&quot;&gt;&lt;/a&gt;Android.mk&lt;/h3&gt;&lt;p&gt;在module下新建 jni 目录，在该目录下新建 &lt;code&gt;Android.mk&lt;/code&gt; 文件，内容复制 &lt;a href=&quot;https://github.com/dxjia/ffmpeg-commands-executor-library/blob/as-version/library/jni/Android.mk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;，当然后续对该文件根据需要还有少许调整，后面会提到。&lt;/p&gt;
&lt;h3 id=&quot;头文件&quot;&gt;&lt;a href=&quot;#头文件&quot; class=&quot;headerlink&quot; title=&quot;头文件&quot;&gt;&lt;/a&gt;头文件&lt;/h3&gt;&lt;p&gt;将从 ffmpeg 源码编译得到的 arm 和 x86 的 include 文件夹 整个复制到 jni 目录下，注意 arm和x86相同的文件直接覆盖或略过都可以的，主要是要让它们互相补充。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;后续实际编译你会发现，这些头文件并不够，还会缺少很多.h文件，所以后续随着编译的过程，必须自己一点点从ffmpeg源码目录不断补充头文件。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;prebuilt&quot;&gt;&lt;a href=&quot;#prebuilt&quot; class=&quot;headerlink&quot; title=&quot;prebuilt&quot;&gt;&lt;/a&gt;prebuilt&lt;/h3&gt;&lt;p&gt;在 jni 目录下新建 &lt;code&gt;prebuilt&lt;/code&gt; 目录，然后在 prebuilt 目录内，分别新建 &lt;code&gt;armeabi&lt;/code&gt; 和 &lt;code&gt;x86&lt;/code&gt; 目录，然后将 ffmpeg 源码编译的出来的 arm 的几个so库文件复制到 armeabi 目录下，同理，将 x86 的复制到 x86 目录下。&lt;br&gt;接下来，修改 Android.mk 文件中的对应的 so 名，都改成自己的对应文件名。如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nclude $(CLEAR_VARS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOCAL_MODULE:= avcodec-prebuilt-$(LIB_NAME_PLUS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOCAL_SRC_FILES:= prebuilt/$(LIB_NAME_PLUS)/libavcodec-56.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;include $(PREBUILT_SHARED_LIBRARY)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;不同的 ffmpeg 版本，这些so的版本是不同的，体现在so文件名都有个数字尾巴，我们可以都去掉，这样比较统一&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;复制源文件&quot;&gt;&lt;a href=&quot;#复制源文件&quot; class=&quot;headerlink&quot; title=&quot;复制源文件&quot;&gt;&lt;/a&gt;复制源文件&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; 可执行文件执行命令的入口是 ffmpeg.c 文件的 main 函数，所以我们的原理就是将个这个main函数修改为我们的jni函数，那么java层调用这个jni接口就可以执行命令了。&lt;br&gt;从ffmpeg 源码目录下的复制下面的文件到jni目录下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ffmpeg.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ffmpeg.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arm_config.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x86_config.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmdutils.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmdutils.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmdutils_common_opts.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ffmpeg_filter.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ffmpeg_opt.c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;调整 &lt;code&gt;Android.mk&lt;/code&gt; 的 &lt;code&gt;LOCAL_SRC_FILES&lt;/code&gt; 部分，将 jni 目录下的 所有 .c 文件都加入其中，这样才能参与编译。&lt;/p&gt;
&lt;h3 id=&quot;新建-config-h-文件&quot;&gt;&lt;a href=&quot;#新建-config-h-文件&quot; class=&quot;headerlink&quot; title=&quot;新建 config.h 文件&quot;&gt;&lt;/a&gt;新建 config.h 文件&lt;/h3&gt;&lt;p&gt;内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#if USE_ARM_CONFIG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;quot;arm_config.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#elif USE_X86_CONFIG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;quot;x86_config.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;增加-jni-接口&quot;&gt;&lt;a href=&quot;#增加-jni-接口&quot; class=&quot;headerlink&quot; title=&quot;增加 jni 接口&quot;&gt;&lt;/a&gt;增加 jni 接口&lt;/h3&gt;&lt;p&gt;如何增加jni这里不多讲了，网上资料很多，也可以参考 &lt;a href=&quot;https://github.com/dxjia/ffmpeg-commands-executor-library/tree/as-version/library&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;library&lt;/a&gt;.&lt;br&gt;将 ffmpeg.c main函数修改为你的 jni接口，然后在 jni 目录下执行 &lt;code&gt;build.sh&lt;/code&gt; (windows下执行 build.cmd) 进行手动编译，一般这里你就会发现少很多头文件，可以一点点试，缺少哪个头文件就从ffmpeg源码目录copy到include的对应目录下，注意有些是需要保留目录结构的，没有就新建。&lt;/p&gt;
&lt;h3 id=&quot;java-部分&quot;&gt;&lt;a href=&quot;#java-部分&quot; class=&quot;headerlink&quot; title=&quot;java 部分&quot;&gt;&lt;/a&gt;java 部分&lt;/h3&gt;&lt;p&gt;在java部分的jni文件中，使用static代码块加载lib库，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	System.loadLibrary(&amp;quot;avutil-54&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	System.loadLibrary(&amp;quot;swresample-1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	System.loadLibrary(&amp;quot;avcodec-56&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	System.loadLibrary(&amp;quot;avformat-56&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	System.loadLibrary(&amp;quot;swscale-3&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	System.loadLibrary(&amp;quot;avfilter-5&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	System.loadLibrary(&amp;quot;avdevice-56&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	System.loadLibrary(&amp;quot;ffmpegjni&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;注意名字，不带lib&lt;/code&gt;，参考 &lt;a href=&quot;https://github.com/dxjia/ffmpeg-commands-executor-library/blob/as-version/library/src/main/java/cn/dxjia/ffmpeg/library/FFmpegNativeHelper.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FFmpegNativeHelper.java&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;至此，从 android studio里编译就可以将所有lib和jni库都编译到你的工程里去了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;附：&lt;/code&gt; 实际移植 ffmpeg3.0 的时候遇到的其他问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在编译ffmpeg源码时，编译完 arm 的版本，去编 x86 版本的时候，提示 strtop 错误，这是由 ffmpeg 的makefile bug造成的，再 &lt;code&gt;run build_android_x86.sh&lt;/code&gt; 之前先手动删除 &lt;code&gt;compat/strtop.o &amp;amp; compat/strtop.d&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;手动编译 jni 时，遇到 &lt;code&gt;libm.h:68:32: error: static declaration of &amp;#39;copysign&amp;#39; follows non-static declaration&lt;/code&gt;错误，原因是 &lt;code&gt;libavutil/internal.h&lt;/code&gt; 中 include libm.h 文件 太后面了，将该include语句提前到文件开始就ok了。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前有开源了一个 &lt;a href=&quot;https://github.com/dxjia/ffmpeg-compile-shared-library-for-android&quot;&gt;ffmpeg shared library&lt;/a&gt;，其中是把 ffmpeg 2.6 源码编译为android 平台可用的共享库，在其中只介绍了如何编译，但对于如何将这些共享库转变为 JNI 使用却没有讲太多。本文就着重介绍一下思路，方便后续升级 ffmpeg 版本。&lt;/p&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="Android" scheme="http://dxjia.cn/tags/Android/"/>
    
      <category term="ffmpeg" scheme="http://dxjia.cn/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>iOS 后台任务设计指导</title>
    <link href="http://dxjia.cn/2016/05/26/ios-background-executions/"/>
    <id>http://dxjia.cn/2016/05/26/ios-background-executions/</id>
    <published>2016-05-26T08:50:19.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;在 &lt;a href=&quot;http://dxjia.cn/2016/05/23/ios-app-life-cycle/&quot;&gt;上一篇&lt;/a&gt; 文章里介绍了 iOS APP 的状态切换，其中一个状态是 &lt;code&gt;Background&lt;/code&gt; ， 也就是后台，在这个状态，程序只被允许执行非常有限的一点点时间，然后就会随时被挂起，不再执行任何代码，但显然是有应用场景&lt;code&gt;需要&lt;/code&gt;不断地在后台执行一些任务，比如 音乐播放 APP， 健康记步软件等。本文就来介绍 iOS 所提供的实现这些场景的技术。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;后台任务分类&quot;&gt;&lt;a href=&quot;#后台任务分类&quot; class=&quot;headerlink&quot; title=&quot;后台任务分类&quot;&gt;&lt;/a&gt;后台任务分类&lt;/h2&gt;&lt;p&gt;首先 Apple 官方为我们界定了 &lt;strong&gt;&lt;code&gt;3&lt;/code&gt;&lt;/strong&gt; 类后台执行任务的场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Background Tasks&lt;/code&gt;&lt;/strong&gt;：APP 在前台时启动某项任务，然后在未结束之前突然 切换到了后台，那么 APP 可以在切换回调里使用某些 API 来继续向系统请求一些时间来继续完成这个任务；完成之后通知系统，之后系统会将 APP 挂起；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Downloading&lt;/code&gt;&lt;/strong&gt;：在后台启动从网络下载文件的任务 – 对于文件下载，iOS 有专门的机制；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Specific Backgournd Tasks&lt;/code&gt;&lt;/strong&gt;：应用需要在后台一直执行代码；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三种类型的后台任务，在实现时各有不同，下面来一一介绍。&lt;/p&gt;
&lt;h2 id=&quot;Background-Tasks&quot;&gt;&lt;a href=&quot;#Background-Tasks&quot; class=&quot;headerlink&quot; title=&quot;Background Tasks&quot;&gt;&lt;/a&gt;Background Tasks&lt;/h2&gt;&lt;p&gt;Apple 文档建议，如果要启动一个后台任务（异步任务），可以使用 API &lt;code&gt;beginBackgroundTaskWithExpirationHandler&lt;/code&gt;来指定，即使启动任务的时候，程序是处在前台的，也没有关系，当位于前台时，该方法请求得到的时间是&lt;code&gt;DBL_MAX&lt;/code&gt;，也就是 double 数据类型最大值，你可以认为是无限大，当任务执行过程中 APP 被切换到后台时，任务还没有完成，这个时间又会自动调整为一个时间片段（具体多少我没找到文档说明，都是说可以通过&lt;code&gt;backgroundTimeRemaining&lt;/code&gt; 属性得到）。需要注意的是， 这个方法是成对使用的，对于一个固定 task ，每次调用 &lt;code&gt;beginBackgroundTaskWithExpirationHandler&lt;/code&gt;，都会产生一个 token 值(&lt;code&gt;UIBackgroundTaskIdentifier&lt;/code&gt; 实际是个整型)，必须在任务执行结束时，调用 &lt;code&gt;endBackgroundTask&lt;/code&gt; 并传递这个 token，来结束后台任务。另外，作为最佳实践，都应该传递一个 超时 handler，以防申请到的时间片段内，还是没能完成任务的话，做最后的清理和标注工作！如果不传的话，那么结果就是 iOS 直接 kill 掉你的APP，闪退咯，因为它觉得我们骗了它嘛，哈哈。。。&lt;br&gt;下面是一段在进入后台时启动异步任务的例子；&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在某处定义一个 token 变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIBackgroundTaskIdentifier&lt;/span&gt; _bgTaskToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 进入后台 委派方法回调 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)applicationDidEnterBackground:(&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; *)application&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _bgTaskToken = [application beginBackgroundTaskWithName:&lt;span class=&quot;string&quot;&gt;@&quot;MyTask&quot;&lt;/span&gt; expirationHandler:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 时间到了，任务还没完成，只能清理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 取消后台任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [application endBackgroundTask:_bgTaskToken];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _bgTaskToken = &lt;span class=&quot;built_in&quot;&gt;UIBackgroundTaskInvalid&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 异步启动任务，这样不会阻塞 本委派方法回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 巴拉巴拉，做自己的任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 任务在时间限制内结束啦，取消后台任务 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [application endBackgroundTask:_bgTaskToken];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _bgTaskToken = &lt;span class=&quot;built_in&quot;&gt;UIBackgroundTaskInvalid&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Background-Downloading&quot;&gt;&lt;a href=&quot;#Background-Downloading&quot; class=&quot;headerlink&quot; title=&quot;Background Downloading&quot;&gt;&lt;/a&gt;Background Downloading&lt;/h2&gt;&lt;p&gt;这类后台任务，必须使用 iOS 指定的机制才可以，那就是 &lt;code&gt;NSURLSession&lt;/code&gt;。使用 NSURLSession  建立的下载任务，会被系统直接在另外一个独立的系统进程里进行管理，不会因 APP 进入后台或挂起等而受到影响，iOS 会统一管理所有的下载任务。并且，即使你的 APP 已经挂掉啦，下载任务还是会继续，等到下载完成啦，系统会唤起你的 APP 进程，并通知你，但如果是用户主动杀掉的你的进程，那么系统会自动取消下载任务。&lt;br&gt;具体使用方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1, 使用 &lt;code&gt;NSURLSessionConfiguration&lt;/code&gt; 类的 &lt;code&gt;backgroundSessionConfigurationWithIdentifier&lt;/code&gt; 方法创建一个 NSURLSessionConfiguration 对象，参数为一个字符串，作为一个 token ，完成时会用到，不能为空或 nil；&lt;/li&gt;
&lt;li&gt;2, 设置上一步创建出的对象的 &lt;code&gt;sessionSendsLaunchEvents&lt;/code&gt; 属性为 &lt;code&gt;YES&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;3, 如果开启下载任务时，是位于前台的，将 &lt;code&gt;discretionary&lt;/code&gt; 属性也设置为 &lt;code&gt;YES&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;4, 设置你需要的其他属性值；&lt;/li&gt;
&lt;li&gt;5，使用配置好的 &lt;code&gt;NSURLSessionConfiguration&lt;/code&gt; 对象，作为参数，创建 &lt;code&gt;NSURLSession&lt;/code&gt; 实例对象；&lt;/li&gt;
&lt;li&gt;6，使用 &lt;code&gt;NSURLSession&lt;/code&gt; 开始下载task，这个这里不细讲啦，需要看 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《URL Session Programming Guide》&lt;/a&gt; ;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果在下载完成之前，你的APP已经挂起或者死掉啦，那么当系统完成下载之后，系统会唤醒你的 APP，并回调 你的 app 委托方法 &lt;code&gt;application:handleEventsForBackgroundURLSession:completionHandler:&lt;/code&gt;，在这其中，参数会传进来一个 &lt;code&gt;token&lt;/code&gt;，这个就是你第一步里 传入的 字符串，使用这个 字符串，再重新创建一个 &lt;code&gt;NSURLSessionConfiguration&lt;/code&gt;，并进行与开始任务之前一样的配置，那么就可以使用这些对象来获取已经完成的任务的详细情况了。&lt;/p&gt;
&lt;h2 id=&quot;Background-Long-Running-Tasks&quot;&gt;&lt;a href=&quot;#Background-Long-Running-Tasks&quot; class=&quot;headerlink&quot; title=&quot;Background Long-Running Tasks&quot;&gt;&lt;/a&gt;Background Long-Running Tasks&lt;/h2&gt;&lt;p&gt;在 iOS 里只有特定的一些应用类型才会被允许可以在后台一直运行，APP 必须显式的声明一些特定权限，才可以在后台进行长时间运行而不被挂起。&lt;br&gt;一些应用类型有 &lt;strong&gt;&lt;code&gt;6&lt;/code&gt;&lt;/strong&gt; 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要在后台播放音频 – 如 Music Player；&lt;/li&gt;
&lt;li&gt;需要在后台录音；&lt;/li&gt;
&lt;li&gt;在后台时也需要不断通知用户位置变动的，比如导航；&lt;/li&gt;
&lt;li&gt;支持 VoIP 电话的 – 如 skype 网络电话；&lt;/li&gt;
&lt;li&gt;需要在后台有规律的下载和处理网络内容的；&lt;/li&gt;
&lt;li&gt;在后台有规律的从其他外设(第三方配件)获取并更新数据的；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要实现这些类型服务的 APP，需要进行专门的声明，这样系统才会采取相应的操作。&lt;/p&gt;
&lt;p&gt;先来看看怎么声明。&lt;/p&gt;
&lt;h3 id=&quot;声明后台服务类型&quot;&gt;&lt;a href=&quot;#声明后台服务类型&quot; class=&quot;headerlink&quot; title=&quot;声明后台服务类型&quot;&gt;&lt;/a&gt;声明后台服务类型&lt;/h3&gt;&lt;p&gt;通过 XCode 的 project setting 里就可以配置类型，选择之后会自动 在你 工程的 Info.plist 文件里 增加 &lt;code&gt;UIBackgroundModes&lt;/code&gt; 键值对；一个 APP 可以同时声明多种支持的后台长期任务类型，在 XCode 里勾选上即可；&lt;br&gt;下表给出了所有 在 XCode 可选的 类型 及 具体含义；&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Xcode background mode&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;UIBackgroundModes 值&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Audio and AirPlay&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;audio&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;应用可以在后台播放或录制音频，包括 Apple 自家的 AirPlay 流媒体音视频；对于录制，需要在APP 第一次运行时，用户授予权限才可进行。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Location updates&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;location&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;APP 不断更新 GPS 位置信息，并通知给用户，即使 APP 处于后台&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Voice over IP&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;voip&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;APP 提供通过网络连接来打电话的功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Newsstand downloads&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;newsstand-content&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;杂志应用，可以在后台下载杂志并处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;External accessory communication&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;external-accessory&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;一些外设控制 APP， 比如一些控制 第三方 MFI 配件的应用，声明这种 类型，可以让APP 在后台不断的与 外设进行沟通&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Uses Bluetooth LE accessories&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;bluetooth-central&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;iPhone 作为蓝牙中心设备使用，也就是做为 server；需要在后台不断更新蓝牙状态的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Acts as a Bluetooth LE accessory&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;bluetooth-peripheral&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;iPhone 作为蓝牙外围设备使用，也就是做 client，需要在后台不断的访问其他蓝牙设备获取数据的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Background fetch&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;fetch&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;APP 需要在后台不断地 频繁有规律的从网络获取数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Remote notifications&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;remote-notification&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;APP 先在后台关注某个 push 推送，但这个 push 推送到达的时候，及时在后台开始对应的下载任务，以尽可能减少用户直接点开 通知 后 查看内容的等待时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;Playing-and-Recording-Background-Audio&quot;&gt;&lt;a href=&quot;#Playing-and-Recording-Background-Audio&quot; class=&quot;headerlink&quot; title=&quot;Playing and Recording Background Audio&quot;&gt;&lt;/a&gt;Playing and Recording Background Audio&lt;/h3&gt;&lt;p&gt;一些典型的应用例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;音乐播放软件&lt;/li&gt;
&lt;li&gt;录音APP&lt;/li&gt;
&lt;li&gt;支持 AirPlay 音视频播放的APP&lt;/li&gt;
&lt;li&gt;网络通话软件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你在 Info.plist 里声明了 &lt;code&gt;UIBackgroundModes&lt;/code&gt; 为 &lt;code&gt;audio&lt;/code&gt; 的时候，在后台进行 audio 的相关操作时，系统 audio API 会自动阻止系统将你的 APP 进程挂起，所以不需要 APP 自己再进行其他额外的处理，只需要处理自己的软件逻辑即可。&lt;/p&gt;
&lt;p&gt;【Note】：手机上是有可能会有多个 APP 同时拥有后台 audio 操作权限的，这时候系统会根据 每个 APP 开始操作音频时的 audio session 配置来决定如何进行操作，而且你应该非常小心的处理一些中断事件，如来电，其他系统提示音等，这些都有相关的 API 和机制，可以参考 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/Introduction/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Audio Session Programming Guide》&lt;/a&gt; &lt;/p&gt;
&lt;h3 id=&quot;Tracking-the-User’s-Location&quot;&gt;&lt;a href=&quot;#Tracking-the-User’s-Location&quot; class=&quot;headerlink&quot; title=&quot;Tracking the User’s Location&quot;&gt;&lt;/a&gt;Tracking the User’s Location&lt;/h3&gt;&lt;p&gt;有三种方式来实现 位置的访问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The significant-change location service（这也是官方推荐的方式）&lt;/li&gt;
&lt;li&gt;Foreground-only location services&lt;/li&gt;
&lt;li&gt;Background location services&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前两种都不需要在 Info.plist 里声明 &lt;code&gt;UIBackgroundModes&lt;/code&gt; ，只有最后一种需要。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;The significant-change location service&lt;/code&gt; ，字面理解，就是只有位置有变化时才会发出通知，有人说这个时机是依据基站，切换了基站时，就会发出一次通知，所以频率会受基站的密度影响，所以市区更新频率会比郊区高。但&lt;code&gt;好处&lt;/code&gt; 是这个服务不管你的 APP 是在前台还是后台，不管是否已经被挂起，或已经死掉了，他都会唤醒你的进程进行相应处理，所以应该是最省电的。&lt;/p&gt;
&lt;p&gt;后两种都是标准的定位服务，只不过一个只能工作在前台，而一个可以在后台工作；&lt;br&gt;【Note】：官方对于使用后台定位服务的 APP 审核是非常严格的，所以使用时一定要小心，并提供足够的说明和解释。&lt;/p&gt;
&lt;p&gt;至于如何实现一个定位 APP ，请看 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/LocationAwarenessPG/Introduction/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Location and Maps Programming Guide 》&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Implementing-a-VoIP-App&quot;&gt;&lt;a href=&quot;#Implementing-a-VoIP-App&quot; class=&quot;headerlink&quot; title=&quot;Implementing a VoIP App&quot;&gt;&lt;/a&gt;Implementing a VoIP App&lt;/h3&gt;&lt;p&gt;网络通话软件，skype 就是其中一个。这样的软件使用 internet 连接来进行语音通话，为了提供健全的电话功能，这类软件必须一直保持一个长期的网络连接，以便监听到来电。实现类似的功能，APP 自己并非一直在后台不被挂起，而是交由系统监听 网络连接，有数据进来时，系统会唤醒 APP，并将 socket 转交给 APP 进行处理；&lt;br&gt;大致步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Info.plist 里进行&lt;code&gt;UIBackgroundModes&lt;/code&gt;配置；&lt;/li&gt;
&lt;li&gt;配置一个 socket 连接用于 VoIP；&lt;/li&gt;
&lt;li&gt;在进入后台时，调用 &lt;code&gt;setKeepAliveTimeout:handler:&lt;/code&gt;方法传递一个回调，用来处理事件；&lt;/li&gt;
&lt;li&gt;配置要使用到的 audio session；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【Note】：貌似对于 VoIP 的实现， iOS 8 有变化，改为使用 remote notification 的方式来做啦，谁说 iOS 没有碎片化的啊，有！具体实现请参考 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/StrategiesforImplementingYourApp/StrategiesforImplementingYourApp.html#//apple_ref/doc/uid/TP40007072-CH5-SW13&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tips for Developing a VoIP App&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Downloading-Newsstand-Content-in-the-Background&quot;&gt;&lt;a href=&quot;#Downloading-Newsstand-Content-in-the-Background&quot; class=&quot;headerlink&quot; title=&quot;Downloading Newsstand Content in the Background&quot;&gt;&lt;/a&gt;Downloading Newsstand Content in the Background&lt;/h3&gt;&lt;p&gt;杂志应用，居然还有专门的处理。但我看介绍，跟前面讲解的 后台下载文件没啥区别啊！！另外好像也是用 通知推送 触发啊。&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/StoreKit/Reference/NewsstandKit_Framework/index.html#//apple_ref/doc/uid/TP40010838&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;About Newsstand Kit Framework&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Communicating-with-an-External-Accessory&quot;&gt;&lt;a href=&quot;#Communicating-with-an-External-Accessory&quot; class=&quot;headerlink&quot; title=&quot;Communicating with an External Accessory&quot;&gt;&lt;/a&gt;Communicating with an External Accessory&lt;/h3&gt;&lt;p&gt;外设设备有很多，比如一些心率监控器，会在必要的时候向手机推送数据。声明了&lt;code&gt;UIBackgroundModes&lt;/code&gt; 为 &lt;code&gt;external-accessory&lt;/code&gt; 后，系统就不会主动关闭 APP 与 外设之间的连接，而是替 APP 监视这个连接，但有数据过来时，会唤醒 APP 进行处理，每次唤醒 APP 只有 &lt;code&gt;10 S&lt;/code&gt; 种时间进行数据处理，所以应当越快越好，万不得已，如果10S不够，需要使用 &lt;code&gt;beginBackgroundTaskWithExpirationHandler:&lt;/code&gt; 方法再申请一段时间进行处理；&lt;br&gt;【Note】：Apple 要求此类应用 需要提供一个 开启 和 关闭 连接的界面供用户使用；&lt;/p&gt;
&lt;h3 id=&quot;Communicating-with-a-Bluetooth-Accessory&quot;&gt;&lt;a href=&quot;#Communicating-with-a-Bluetooth-Accessory&quot; class=&quot;headerlink&quot; title=&quot;Communicating with a Bluetooth Accessory&quot;&gt;&lt;/a&gt;Communicating with a Bluetooth Accessory&lt;/h3&gt;&lt;p&gt;类似上一节的 配件，如果心率监控器跟 手机之间使用的连接方式是蓝牙，那么就一模一样啦，连 唤醒的时间限制都一样，都是 &lt;code&gt;10 S&lt;/code&gt;！！！略啦。。。&lt;/p&gt;
&lt;h3 id=&quot;Fetching-Small-Amounts-of-Content-Opportunistically&quot;&gt;&lt;a href=&quot;#Fetching-Small-Amounts-of-Content-Opportunistically&quot; class=&quot;headerlink&quot; title=&quot;Fetching Small Amounts of Content Opportunistically&quot;&gt;&lt;/a&gt;Fetching Small Amounts of Content Opportunistically&lt;/h3&gt;&lt;p&gt;有人依靠这种手段来实现后台永存，但现在不好使啦，除非你是真的每次都在下载东西，而且每次时间都很短。用户的流量啊。因为声明了这个 mode 之后，并不保证 系统一定会给你分配时间来执行后台任务，因为它自己有一套逻辑，如果你经常性唤醒，但却每次都耗时很久，又没有做从网络下载东西的操作，那么以后你被分配给唤醒的几率就会越来越小。另外还有审核！！！！&lt;/p&gt;
&lt;p&gt;正常情况下，声明了这个类型之后，系统在你的 APP 进入后台后，会间隔性的给机会将你的 APP 唤醒，并回调你的 委托方法 &lt;code&gt;application:performFetchWithCompletionHandler:&lt;/code&gt;，你需要在这个回调里检查是否有新内容可用，如果有，就开启后台下载，推荐使用 &lt;code&gt;NSURLSession&lt;/code&gt; 来建立，下载完成后，你必须调用这个方法出入 的 &lt;code&gt;completionHandler&lt;/code&gt; 并传入一个 整型值  来表示 你的处理是否正常，UI是否已经更新，让系统来决定更新 snapshot等；&lt;/p&gt;
&lt;h3 id=&quot;Using-Push-Notifications-to-Initiate-a-Download&quot;&gt;&lt;a href=&quot;#Using-Push-Notifications-to-Initiate-a-Download&quot; class=&quot;headerlink&quot; title=&quot;Using Push Notifications to Initiate a Download&quot;&gt;&lt;/a&gt;Using Push Notifications to Initiate a Download&lt;/h3&gt;&lt;p&gt;这个方式，是你的应用中包含通知功能时，你在服务端推送的通知内容里加入 键值对 &lt;code&gt;content-available&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt; ，那么 手机收到这个通知后，会自动启动 APP 到后台，或 唤醒（依旧保持后台执行），并回调 委托方法 &lt;code&gt;application:didReceiveRemoteNotification:fetchCompletionHandler:&lt;/code&gt; ，在这个方法里进行内容下载。&lt;/p&gt;
&lt;p&gt;【Note】：需要服务端推送配合&lt;/p&gt;
&lt;h2 id=&quot;哪些情况系统会唤醒挂起进程&quot;&gt;&lt;a href=&quot;#哪些情况系统会唤醒挂起进程&quot; class=&quot;headerlink&quot; title=&quot;哪些情况系统会唤醒挂起进程&quot;&gt;&lt;/a&gt;哪些情况系统会唤醒挂起进程&lt;/h2&gt;&lt;p&gt;当一些特定事件发生时，系统会唤醒已经被挂起的进程，转换到后台运行状态，这些事件针对不同类型的APP 有所不同：&lt;/p&gt;
&lt;h3 id=&quot;location-apps&quot;&gt;&lt;a href=&quot;#location-apps&quot; class=&quot;headerlink&quot; title=&quot;location apps&quot;&gt;&lt;/a&gt;location apps&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;系统产生了符合 APP 配置的定位要求的位置更新；&lt;/li&gt;
&lt;li&gt;设备进入或离开了一个网络注册的区域，你可以理解为基站；&lt;h3 id=&quot;audio-apps&quot;&gt;&lt;a href=&quot;#audio-apps&quot; class=&quot;headerlink&quot; title=&quot;audio apps&quot;&gt;&lt;/a&gt;audio apps&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;audio framework 需要 app 处理数据的时候–任何 播放、录制；&lt;h3 id=&quot;Bluetooth-apps&quot;&gt;&lt;a href=&quot;#Bluetooth-apps&quot; class=&quot;headerlink&quot; title=&quot;Bluetooth apps&quot;&gt;&lt;/a&gt;Bluetooth apps&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;当手机扮演中心设备时，收到了其他蓝牙设备发来的数据；&lt;/li&gt;
&lt;li&gt;当手机扮演外围设备时，收到了蓝牙服务端发来的数据；&lt;h3 id=&quot;background-download-apps&quot;&gt;&lt;a href=&quot;#background-download-apps&quot; class=&quot;headerlink&quot; title=&quot;background download apps&quot;&gt;&lt;/a&gt;background download apps&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;本应用的一个包含 &lt;code&gt;content-available&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt; 的推送通知到达了手机；&lt;/li&gt;
&lt;li&gt;background fetch 类型，系统给予了 APP 唤醒的机会；&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;NSURLSession&lt;/code&gt; 进行后台下载的APP，在下载过程完成或出现问题时，系统会主动唤醒对应 APP；&lt;/li&gt;
&lt;li&gt;杂志应用，下载完成时唤醒 APP；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【Note】：绝大多数情况下，系统不会重启被用户手动强制关闭的 APP，但在 iOS 8 之后， location apps 是个例外。其他的所有被用户手动强制关闭的APP 都不会被系统主动唤起，直到 用户再次 主动启动这个 APP，或者手机重启并在用户输入了解锁密码之后才会恢复机制。&lt;/p&gt;
&lt;h2 id=&quot;做一个尽责的后台APP&quot;&gt;&lt;a href=&quot;#做一个尽责的后台APP&quot; class=&quot;headerlink&quot; title=&quot;做一个尽责的后台APP&quot;&gt;&lt;/a&gt;做一个尽责的后台APP&lt;/h2&gt;&lt;p&gt;Apple 教育我们，如果你要实现一个后台 APP，应该做一个有责任的APP，不要乱搞，哈哈。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要在后台调用任何 OpenGL ES 接口，在进入后台之前也要保证这些调用都已结束，否则你的 APP 将直接被 kill；&lt;/li&gt;
&lt;li&gt;取消所有 &lt;code&gt;Bonjour&lt;/code&gt; 相关的操作，还不清楚这个是啥东西，不过 Apple 说即使你不取消，它在把你挂起之前也会都给你取消；&lt;/li&gt;
&lt;li&gt;如果有网络操作，做好容错处理；&lt;/li&gt;
&lt;li&gt;保存 APP 状态，进入后台前持久化一些数据，以便恢复；&lt;/li&gt;
&lt;li&gt;尽可能多的释放内存，尤其是强引用；&lt;/li&gt;
&lt;li&gt;停止使用共享的系统资源，比如 电话本，日历等，进入后台前，release他们；&lt;/li&gt;
&lt;li&gt;不要在后台进行 UI 的更新操作；&lt;/li&gt;
&lt;li&gt;做好对外设配件的 连接 和断开 事件的响应；这个是 外设编程的机制啦，需要 参考 &lt;a href=&quot;https://developer.apple.com/library/ios/featuredarticles/ExternalAccessoryPT/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009502&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;External Accessory Programming Topics&lt;/a&gt; ；&lt;/li&gt;
&lt;li&gt;关闭弹出窗口和弹出菜单等；&lt;/li&gt;
&lt;li&gt;移除窗口上的一些敏感信息；&lt;/li&gt;
&lt;li&gt;在后台的执行尽可能小的任务；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后， Apple 建议能不后台就不后台，那当然。。。&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;[1] &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/BackgroundExecution/BackgroundExecution.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;App Programming Guide for iOS - Background Execution&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;a href=&quot;http://dxjia.cn/2016/05/23/ios-app-life-cycle/&quot;&gt;上一篇&lt;/a&gt; 文章里介绍了 iOS APP 的状态切换，其中一个状态是 &lt;code&gt;Background&lt;/code&gt; ， 也就是后台，在这个状态，程序只被允许执行非常有限的一点点时间，然后就会随时被挂起，不再执行任何代码，但显然是有应用场景&lt;code&gt;需要&lt;/code&gt;不断地在后台执行一些任务，比如 音乐播放 APP， 健康记步软件等。本文就来介绍 iOS 所提供的实现这些场景的技术。&lt;br&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="iOS" scheme="http://dxjia.cn/tags/iOS/"/>
    
      <category term="Apple" scheme="http://dxjia.cn/tags/Apple/"/>
    
      <category term="Guideline" scheme="http://dxjia.cn/tags/Guideline/"/>
    
  </entry>
  
  <entry>
    <title>iOS APP Life Cycle</title>
    <link href="http://dxjia.cn/2016/05/23/ios-app-life-cycle/"/>
    <id>http://dxjia.cn/2016/05/23/ios-app-life-cycle/</id>
    <published>2016-05-23T07:56:44.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;本文是学习过程中的笔记，帮助理解 iOS APP 特点；跟 Android 类似，每个 iOS APP 也都有自己的生命周期，前台、后台、挂起等，理解这些状态转换过程，并处理相应事件，将有助于提供良好的用户体验。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;入口&quot;&gt;&lt;a href=&quot;#入口&quot; class=&quot;headerlink&quot; title=&quot;入口&quot;&gt;&lt;/a&gt;入口&lt;/h2&gt;&lt;p&gt;跟 OS X 桌面程序一样，是 &lt;code&gt;main&lt;/code&gt; 函数，不同的是，XCode 帮你直接实现一个默认的main 函数，而且任何情况下都不需要修改这个函数；&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;AppDelegate.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main(int argc, char * argv[])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @autoreleasepool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到 是直接将控制权交给 framework 的 UIApplicationMain 类；&lt;/p&gt;
&lt;h2 id=&quot;APP-结构&quot;&gt;&lt;a href=&quot;#APP-结构&quot; class=&quot;headerlink&quot; title=&quot;APP 结构&quot;&gt;&lt;/a&gt;APP 结构&lt;/h2&gt;&lt;p&gt;APP 启动过程中， &lt;code&gt;UIApplicationMain&lt;/code&gt; 类会为 APP 创建一些重要的对象，并让整个 APP 运行起来，其中一个最重要的就是 &lt;code&gt;UIApplication&lt;/code&gt; 对象，在这个对象里，不断循环并向 APP 派发各种系统事件，像不像 Android 的 &lt;code&gt;MainThread&lt;/code&gt;， 太像啦。。。下面这个是官方给的图，&lt;code&gt;MVC&lt;/code&gt; 结构，iOS 开发里这种设计模式贯穿始终。&lt;br&gt;&lt;img src=&quot;http://7xqitw.com1.z0.glb.clouddn.com/blog/res/core_objects_2x.png&quot; onload=&quot;if(this.width &gt;= 640){this.width = 640}&quot; align=&quot;middle&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;The-Main-Event-Loop&quot;&gt;&lt;a href=&quot;#The-Main-Event-Loop&quot; class=&quot;headerlink&quot; title=&quot;The Main Event Loop&quot;&gt;&lt;/a&gt;The Main Event Loop&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;UIApplication&lt;/code&gt; 对象里的主循环，构成了APP 的主线程，系统产生的一些用户交互事件，通过在 APP 初始化时由 &lt;code&gt;UIKit&lt;/code&gt; 生成的一个端口号，分发给 APP， &lt;code&gt;UIApplication&lt;/code&gt; 对象里的主循环 是 APP 里第一个接收到这些事件的地方；&lt;strong&gt;当然，并不是所有的交互事件都会走 main loop， 可以知道主循环的概念即可&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://7xqitw.com1.z0.glb.clouddn.com/blog/res/event_draw_cycle_a_2x.png&quot; onload=&quot;if(this.width &gt;= 640){this.width = 640}&quot; align=&quot;middle&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;APP-S-状态&quot;&gt;&lt;a href=&quot;#APP-S-状态&quot; class=&quot;headerlink&quot; title=&quot;APP`S 状态&quot;&gt;&lt;/a&gt;APP`S 状态&lt;/h2&gt;&lt;p&gt;iOS 的 APP 有 &lt;strong&gt;&lt;code&gt;5&lt;/code&gt;&lt;/strong&gt; 种状态，任何时刻都只会是这 5 种中的一种！如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;状态&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Not running&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;未运行状态，APP 还没有被启动过，或者 已经被系统从挂起状态清理掉了；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Inactive&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;未激活状态，APP 正在运行并处于前台，但是无法接收任何事件，通常发生在状态转换的时期，而且在这个状态停留的时间一般都非常短暂，过渡的；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Active&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;激活状态， 正在运行，并处于前台，与用户直接交互，可以接收所有事件；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Background&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;后台运行状态，程序处于后台并可以执行代码(用户切换到别的程序)，一个 APP 进入后台后，iOS 只会留给程序很短暂的一点时间进行数据清理或保存工作，之后就会将程序挂起；所以 iOS 上在这个时期所做的事情非常有限；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Suspended&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;挂起状态，APP还活着，在后台，继续占有内存，但不会执行任何代码，iOS 会保持这个状态一段时间，以便快速响应用户重新回到 APP，但如果系统内存吃紧，就会优先杀掉这个状态的进程； 注意，系统 从 Background 转到 Suspended 状态不会有任何通知&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;官方给的图，&lt;strong&gt;&lt;code&gt;从这个图上我们可以看出，Active 和 Background 状态之间的转换都会是经过一个短暂的 Inactive 状态的&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://7xqitw.com1.z0.glb.clouddn.com/blog/res/high_level_flow_2x.png&quot; onload=&quot;if(this.width &gt;= 500){this.width = 500}&quot; align=&quot;middle&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;状态切换回调&quot;&gt;&lt;a href=&quot;#状态切换回调&quot; class=&quot;headerlink&quot; title=&quot;状态切换回调&quot;&gt;&lt;/a&gt;状态切换回调&lt;/h2&gt;&lt;p&gt;APP 状态转换通过在 app delegate 类对象里进行回调一些固定的方法达到通知 APP 的效果，跟 Android 的 &lt;code&gt;onCreate, onStart, onResume....&lt;/code&gt; 太像！&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;方法&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;application:willFinishLaunchingWithOptions&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;程序正在被启动，但还没有到前台，可以在这里做第一次的初始化动作，如检查 options 等；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;application:didFinishLaunchingWithOptions&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;程序已经完成系统初始化工作，但依然还没有到前台，可以在这里做最终的初始化动作；这两个回调都是 APP 被第一次 launch 时才会回调的，其他从后台挂起到前台是不会触发这两个的，为啥有俩？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;applicationDidBecomeActive&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;已经处于 Active 状态，这里就可以开始做事啦；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;applicationWillResignActive&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;程序马上就要进入后台啦&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;applicationDidEnterBackground&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;APP 已经进入后台，并可能随时会被挂起，做状态保存吧； 当然也可以在这里请求延长后台任务的执行，有 API；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;applicationWillEnterForeground&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;通知你 程序马上就要进入前台啦，但此时还不能响应事件，还不是 Active，正在 active 后 会回调 applicationDidBecomeActive 方法，所以先在这里恢复状态吧；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;applicationWillTerminate&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;程序将被杀掉（该回调只会在程序处于后台且非挂起的状态下被杀掉），系统内存不足时，系统会杀掉后台的程序，在这里做善后工作吧；而如果系统是杀掉的挂起的程序，则不会有任何通知；用户主动杀掉进程的机制跟此类似&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文是学习过程中的笔记，帮助理解 iOS APP 特点；跟 Android 类似，每个 iOS APP 也都有自己的生命周期，前台、后台、挂起等，理解这些状态转换过程，并处理相应事件，将有助于提供良好的用户体验。&lt;br&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="iOS" scheme="http://dxjia.cn/tags/iOS/"/>
    
      <category term="APP" scheme="http://dxjia.cn/tags/APP/"/>
    
  </entry>
  
  <entry>
    <title>使用Gradle发布Android开源项目到JCenter</title>
    <link href="http://dxjia.cn/2016/05/05/update-library-to-jcenter/"/>
    <id>http://dxjia.cn/2016/05/05/update-library-to-jcenter/</id>
    <published>2016-05-05T01:03:24.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;有时候为了别人使用方便，需要将自己的开源库发布到&lt;code&gt;jcenter&lt;/code&gt;，这样，别人在&lt;code&gt;build.gradle&lt;/code&gt;里一句话就可以引用到你的库，本文就来介绍如何通过配置gradle来方便的进行library发布。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;之前发布过一个&lt;code&gt;BaiduVoiceHelper&lt;/code&gt;，后来时间长了，过程就忘记了，重新检索，根据 &lt;a href=&quot;http://blog.csdn.net/maosidiaoxian/article/details/43148643&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/maosidiaoxian/article/details/43148643&lt;/a&gt; 这篇文章的指引最后成功啦，原作者还配了写好的&lt;code&gt;gradle&lt;/code&gt;并开源，地址：&lt;a href=&quot;https://github.com/msdx/gradle-publish&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/msdx/gradle-publish&lt;/a&gt; ，实际使用过程中发现其github上的写好的&lt;code&gt;gradle&lt;/code&gt;是有更新过的，所以跟他的博文稍微有些出入，需要两者结合起来看，所以这里重新总结一下，以便日后直接使用。&lt;/p&gt;
&lt;h1 id=&quot;配置bintray账号与API-Key&quot;&gt;&lt;a href=&quot;#配置bintray账号与API-Key&quot; class=&quot;headerlink&quot; title=&quot;配置bintray账号与API Key&quot;&gt;&lt;/a&gt;配置&lt;code&gt;bintray&lt;/code&gt;账号与&lt;code&gt;API Key&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;首先注册&lt;code&gt;bintray&lt;/code&gt;账号，地址：&lt;a href=&quot;https://bintray.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://bintray.com/&lt;/a&gt;&lt;br&gt;支持使用&lt;code&gt;github&lt;/code&gt;账号直接创建bintray账号，账号生成后会自动为你分配一个&lt;code&gt;API Key&lt;/code&gt;，&lt;code&gt;账号名&lt;/code&gt;以及&lt;code&gt;API Key&lt;/code&gt;是我们能够上传库到bintray的钥匙。&lt;br&gt;登录bintray网站后，先&lt;strong&gt;点击自己的用户名进入个人页面，然后点击&lt;code&gt;Edit&lt;/code&gt;进入&lt;code&gt;profile&lt;/code&gt;页面，这里就可以看到API Key了&lt;/strong&gt;。&lt;br&gt;&lt;img src=&quot;http://dxjia.cn/wp-content/uploads/2015/09/bintray-user-1.png&quot; alt=&quot;click user&quot;&gt;&lt;br&gt;进入个人页面：&lt;br&gt;&lt;img src=&quot;http://dxjia.cn/wp-content/uploads/2015/09/bintray-user-2.png&quot; alt=&quot;bintray index&quot;&gt;&lt;br&gt;进入profile：&lt;br&gt;&lt;img src=&quot;http://dxjia.cn/wp-content/uploads/2015/09/bintray-apikey.png&quot; alt=&quot;bintray profile&quot;&gt;&lt;/p&gt;
&lt;p&gt;至此，便可以复制到&lt;code&gt;API Key&lt;/code&gt;信息啦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;接下来&lt;/code&gt;&lt;/strong&gt;，我们需要将这些信息存到本地，也就是你的系统&lt;code&gt;.gradle&lt;/code&gt;目录，这里要注意，我们保存在系统下，而&lt;strong&gt;不是你的project下的.gradle目录&lt;/strong&gt;，如果你的是XP，那么一般是在 &lt;strong&gt;&lt;code&gt;C:\Documents and Settings\用户名\.gradle&lt;/code&gt;&lt;/strong&gt;，而如果是win7以上，那么是在&lt;strong&gt;&lt;code&gt;c:\Users\用户名\.gradle&lt;/code&gt;&lt;/strong&gt;。&lt;br&gt;然后再这个目录下新建&lt;code&gt;gradle.properties&lt;/code&gt;文件，在其中记录bintray信息，如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BINTRAY_USER=dxjia&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BINTRAY_KEY=xxxxxxx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果已经存在，那么就直接在文件末尾添加上面的内容，具体修改为你自己的实际情况。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;这样处理的好处是：我们只需要记录一次，以后每个需要发布到jcenter的库都可以使用到这里的信息，并且这个由于是存放在project目录之外的，所以也不会受到版本控制的影响，不会因为意外上传而泄露了个人信息。&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;配置项目Gradle&quot;&gt;&lt;a href=&quot;#配置项目Gradle&quot; class=&quot;headerlink&quot; title=&quot;配置项目Gradle&quot;&gt;&lt;/a&gt;配置项目Gradle&lt;/h1&gt;&lt;h2 id=&quot;复制gradle-properties到待发布module目录&quot;&gt;&lt;a href=&quot;#复制gradle-properties到待发布module目录&quot; class=&quot;headerlink&quot; title=&quot;复制gradle.properties到待发布module目录&quot;&gt;&lt;/a&gt;复制gradle.properties到待发布module目录&lt;/h2&gt;&lt;p&gt;将 &lt;a href=&quot;https://github.com/msdx/gradle-publish/blob/master/gradle.properties&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/msdx/gradle-publish/blob/master/gradle.properties&lt;/a&gt; 这个文件复制到你需要发布的库的目录下，&lt;code&gt;注意是你的待发布的库的module下&lt;/code&gt;，并修改它的内容，如下：&lt;br&gt;以下面的最终引用方式为例：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;cn.dxjia:imagetextbutton:1.0.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置内容如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PROJ_GROUP=cn.dxjia&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PROJ_VERSION=1.0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PROJ_NAME=imagetextbutton&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PROJ_WEBSITEURL=https://github.com/dxjia/ImageTextButton&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PROJ_ISSUETRACKERURL=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PROJ_VCSURL=git@github.com:dxjia/ImageTextButton.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PROJ_DESCRIPTION=android button with icon and text&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PROJ_ARTIFACTID=imagetextbutton&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEVELOPER_ID=dxjia&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEVELOPER_NAME=dex.jia&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEVELOPER_EMAIL=jdxwind@dxjia.cn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最终的引用形式会是 &lt;code&gt;PROJ_GROUP:PROJ_ARTIFACTID:PROJ_VERSION&lt;/code&gt;的拼接。每次新版本的发布都要记得来修改 &lt;code&gt;PROJ_VERSION&lt;/code&gt;属性，否则····&lt;/p&gt;
&lt;h2 id=&quot;修改待发布目录的build-gradle&quot;&gt;&lt;a href=&quot;#修改待发布目录的build-gradle&quot; class=&quot;headerlink&quot; title=&quot;修改待发布目录的build.gradle&quot;&gt;&lt;/a&gt;修改待发布目录的build.gradle&lt;/h2&gt;&lt;p&gt;配置好上面的内容之后，接下来我们需要修改工程待发布库目录下的&lt;code&gt;build.gradle&lt;/code&gt;文件。&lt;br&gt;在&lt;code&gt;build.gradle&lt;/code&gt;文件的&lt;code&gt;dependencies&lt;/code&gt;中增加下面的内容：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;classpath &amp;apos;com.github.dcendents:android-maven-gradle-plugin:1.3&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;classpath &amp;apos;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;classpath &amp;quot;org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0&amp;quot; // Remove it if you won&amp;apos;t to publish SNAPSHOT version.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在文件末尾加上下面一句引用：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// this script was used to upload files to bintray.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply from: &amp;apos;https://raw.githubusercontent.com/msdx/gradle-publish/master/bintray.gradle&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这句话可以在gradle build的时候，直接从github仓库拉取&lt;code&gt;bintray.gradle&lt;/code&gt;文件进行引用，有时候由于网络问题，会出现下面的问题，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Gradle sync failed: Software caused connection abort: recv failed&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这时候可以手动将&lt;code&gt;bintray.gradle&lt;/code&gt;保存到项目本地待发布的库目录下，并将同目录下的build.gradle最后一句改为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply from: &amp;apos;bintray.gradle&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就可以了。&lt;/p&gt;
&lt;h1 id=&quot;执行发布&quot;&gt;&lt;a href=&quot;#执行发布&quot; class=&quot;headerlink&quot; title=&quot;执行发布&quot;&gt;&lt;/a&gt;执行发布&lt;/h1&gt;&lt;p&gt;至此，我们就可以执行发布命令啦，使用&lt;strong&gt;&lt;code&gt;命令行&lt;/code&gt;&lt;/strong&gt;切换到项目目录下，然后运行：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gradlew.bat bintrayUpload&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者在Android studio里，直接右侧选择执行 &lt;code&gt;bintrayUpload&lt;/code&gt; 这个task即可，这个命令执行结束后，就会直接将生成的 &lt;code&gt;aar&lt;/code&gt;库推送到了你的&lt;code&gt;bintray&lt;/code&gt;账号下。&lt;/p&gt;
&lt;h1 id=&quot;包含到Jcenter&quot;&gt;&lt;a href=&quot;#包含到Jcenter&quot; class=&quot;headerlink&quot; title=&quot;包含到Jcenter&quot;&gt;&lt;/a&gt;包含到Jcenter&lt;/h1&gt;&lt;p&gt;执行完步骤三后，登录到你的&lt;code&gt;bintray&lt;/code&gt;个人页面下，也就是 &lt;a href=&quot;https://bintray.com/dxjia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://bintray.com/dxjia&lt;/a&gt; ，会在右下角显示出你的动态，会有刚刚推送的库的记录，点击打开。&lt;br&gt;&lt;img src=&quot;http://dxjia.cn/wp-content/uploads/2015/09/bintray-lastest-activity.png&quot; alt=&quot;bintray lastest activity&quot;&gt;&lt;br&gt;打开的页面中：&lt;br&gt;点击右下角的 &lt;strong&gt;&lt;code&gt;Add to Jcenter&lt;/code&gt;&lt;/strong&gt;按钮，弹出的页面中填写上一些描述，或者不填，然后&lt;strong&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/strong&gt;，如此便发出了申请，一般很快就会审核通过。&lt;br&gt;&lt;img src=&quot;http://dxjia.cn/wp-content/uploads/2015/09/add-to-jcenter.png&quot; alt=&quot;add to jcenter&quot;&gt;&lt;br&gt;填写申请描述:&lt;br&gt;&lt;img src=&quot;http://dxjia.cn/wp-content/uploads/2015/09/add-to-jcenter-2.png&quot; alt=&quot;compose comments&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;&lt;code&gt;基本上按照上面的4个步骤即可，感谢作者 msdx 提供的现成的脚本。&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;[1] &lt;a href=&quot;http://blog.csdn.net/maosidiaoxian/article/details/43148643&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/maosidiaoxian/article/details/43148643&lt;/a&gt;&lt;br&gt;[2] &lt;a href=&quot;https://github.com/msdx/gradle-publish&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/msdx/gradle-publish&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;有时候为了别人使用方便，需要将自己的开源库发布到&lt;code&gt;jcenter&lt;/code&gt;，这样，别人在&lt;code&gt;build.gradle&lt;/code&gt;里一句话就可以引用到你的库，本文就来介绍如何通过配置gradle来方便的进行library发布。&lt;br&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="Android" scheme="http://dxjia.cn/tags/Android/"/>
    
      <category term="Bintry" scheme="http://dxjia.cn/tags/Bintry/"/>
    
      <category term="jCenter" scheme="http://dxjia.cn/tags/jCenter/"/>
    
  </entry>
  
  <entry>
    <title>在博客空间下为手机APP创建RESTFUL API</title>
    <link href="http://dxjia.cn/2016/04/14/write-restful-api-in-blog-space/"/>
    <id>http://dxjia.cn/2016/04/14/write-restful-api-in-blog-space/</id>
    <published>2016-04-14T13:30:28.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;这个blog建立有一段时间了，空间是购买的万网（现在归阿里云）的虚拟空间，OS是linux虚拟主机，之前使用wordpress直接搭建的，后来改为hexo静态博客，当时并没有多想，只想着早点搭起博客，所以将wordpress直接安装在空间的 &lt;strong&gt; 根目录 &lt;/strong&gt; 下了。&lt;br&gt;而最近自己在练习做一个Android客户端，有完整的后台接口和APP需求文档，后台的接口为APP提供登录、注册、信息获取等一系列操作。再去买空间不太现实，所以只能将接口实现在blog同目录下，以空间子目录的形式进行实现。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;RESTFUL-API&quot;&gt;&lt;a href=&quot;#RESTFUL-API&quot; class=&quot;headerlink&quot; title=&quot;RESTFUL API&quot;&gt;&lt;/a&gt;RESTFUL API&lt;/h1&gt;&lt;p&gt;为了是接口看起来美观易用，采用RESTFUL API设计原则，所谓RESTFUL，我的简单理解，就是接口清晰明了，目录名就携带了要请求的信息，而不再使用庞杂的参数来携带信息，而且URL的设计上都使用名词，举个例子：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现一个接口，获取后台&lt;code&gt;id&lt;/code&gt;为&lt;code&gt;10001&lt;/code&gt;的用户信息&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以前的方式： http ://dxjia.cn/api&lt;strong&gt;&lt;code&gt;?action=get_user&amp;amp;id=10001&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;RESTFUL   ： http: //dxjia.cn/api/&lt;strong&gt;&lt;code&gt;user/10001&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是不是简洁明了很多。当然具体RESTFUL的设计思想还有更多，这里不做具体介绍啦，可以参考文后的参考文献&lt;a href=&quot;#示例&quot;&gt; 1 &lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;创建子域名及绑定&quot;&gt;&lt;a href=&quot;#创建子域名及绑定&quot; class=&quot;headerlink&quot; title=&quot;创建子域名及绑定&quot;&gt;&lt;/a&gt;创建子域名及绑定&lt;/h1&gt;&lt;p&gt;为了使url更加美观，我选择使用子域名&lt;code&gt;api.dxjia.cn&lt;/code&gt;来指向，子域名的创建是非常简单的，购买过域名之后，子域名可以免费创建，这里以我在阿里云的后台管理进行创建为例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先进入你的域名后台点击解析，直接添加解析，如下图，记录值部分写你的主机(虚拟空间)真实IP地址。一般都同时添加不带www和带www。&lt;br&gt;&lt;img src=&quot;http://dxjia.cn/wp-content/uploads/2015/08/ziyuming.png&quot; alt=&quot;Img&quot;&gt;&lt;/li&gt;
&lt;li&gt;然后进入主机(虚拟空间)后台进行域名绑定，绑定域名到空间。&lt;br&gt;&lt;img src=&quot;http://dxjia.cn/wp-content/uploads/2015/08/yumingbangding.png&quot; alt=&quot;Img&quot;&gt;&lt;br&gt;这样之后，api.dxjia.cn就会指向你的空间根目录，是的，现在还没有完成子域名指向要存放我们实现的API的代码的根目录。需要继续往下看。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;创建子目录&quot;&gt;&lt;a href=&quot;#创建子目录&quot; class=&quot;headerlink&quot; title=&quot;创建子目录&quot;&gt;&lt;/a&gt;创建子目录&lt;/h1&gt;&lt;p&gt;在网站根目录下创建子目录&lt;code&gt;api&lt;/code&gt;，为了以后api的版本升级在api目录下继续创建子目录 v1 和 v2，用来区别使用的api版本，也是很时髦的功能。如下：&lt;br&gt;&lt;img src=&quot;http://dxjia.cn/wp-content/uploads/2015/08/mulujiegou.png&quot; alt=&quot;Img&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;htdocs&lt;/code&gt;是空间根目录，&lt;code&gt;wp_&lt;/code&gt;开头的目录都是wordpress的目录。&lt;br&gt;当然，如果你不需要区分版本v1和v2，那么就可以直接在api目录下来写接口代码啦。&lt;/p&gt;
&lt;h1 id=&quot;指向子目录&quot;&gt;&lt;a href=&quot;#指向子目录&quot; class=&quot;headerlink&quot; title=&quot;指向子目录&quot;&gt;&lt;/a&gt;指向子目录&lt;/h1&gt;&lt;p&gt;子域名和子目录都创建好了，而且子域名这时候也已经绑定到空间了，那么我们现在访问api.dxjia.cn，发现其依旧是打开我的blog了，这是因为我们还没有将子域名指向我们的子目录，其默认直接执行根目录下的index.php，也就是blog的入口啦。&lt;br&gt;至于如何将子域名指向子目录，网上有很多都是通过修改&lt;code&gt;.htaccess&lt;/code&gt;文件来达到重定向的，确实是可以做到的，但我对正则表达式比较头晕，所以选择了另外一种方式：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 既然访问&lt;code&gt;api.dxjia.cn&lt;/code&gt;是会执行空间根目录下的&lt;code&gt;index.php&lt;/code&gt;文件，那么我们在这个文件里区分访问的域名，如果是api.dxjia.cn这个子域名，我们就直接跳到api子目录下的php文件；如果是dxjia.cn，那么我们才执行wordpress博客代码 &lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * change this to false to disable restful api&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$apiEnable = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$requireHost = strtolower($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;HTTP_HOST&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$isRequiringApi = $apiEnable &amp;amp; (!strcmp($requireHost, &lt;span class=&quot;string&quot;&gt;&quot;api.dxjia.cn&quot;&lt;/span&gt;) || !strcmp($requireHost, &lt;span class=&quot;string&quot;&gt;&quot;www.api.dxjia.cn&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($isRequiringApi) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;api/api.php&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Front to the WordPress application. This file doesn&#39;t do anything, but loads&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * wp-blog-header.php which does and tells WordPress to load the theme.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@package&lt;/span&gt; WordPress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Tells WordPress to load the WordPress theme and output it.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@var&lt;/span&gt; bool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;define(&lt;span class=&quot;string&quot;&gt;&#39;WP_USE_THEMES&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Loads the WordPress Environment and Template */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;( dirname( &lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt; ) . &lt;span class=&quot;string&quot;&gt;&#39;/wp-blog-header.php&#39;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;else 分支下的代码是原先博客的执行逻辑，这样就一目了然了，如果判断是访问的子域名&lt;code&gt;api.dxjia.cn&lt;/code&gt;或&lt;code&gt;www.api.dxjia.cn&lt;/code&gt;那么我们就直接require api目录下的&lt;code&gt;api.php&lt;/code&gt;代码，这样就解决了跳转的问题。&lt;/p&gt;
&lt;h1 id=&quot;入口文件&quot;&gt;&lt;a href=&quot;#入口文件&quot; class=&quot;headerlink&quot; title=&quot;入口文件&quot;&gt;&lt;/a&gt;入口文件&lt;/h1&gt;&lt;p&gt;再来看看api.php的写法，其中利用与index.php中差不多的方式来进行v1还是v2的api访问控制。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$request_method = strtolower($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;REQUEST_METHOD&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$path_info = &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (! &lt;span class=&quot;keyword&quot;&gt;empty&lt;/span&gt;($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;PATH_INFO&#39;&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $path_info = $_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;PATH_INFO&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;elseif&lt;/span&gt; (! &lt;span class=&quot;keyword&quot;&gt;empty&lt;/span&gt;($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;ORIG_PATH_INFO&#39;&lt;/span&gt;]) &amp;amp;&amp;amp; $_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;ORIG_PATH_INFO&#39;&lt;/span&gt;] !== &lt;span class=&quot;string&quot;&gt;&#39;/api.php&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $path_info = $_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;ORIG_PATH_INFO&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (! &lt;span class=&quot;keyword&quot;&gt;empty&lt;/span&gt;($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;REQUEST_URI&#39;&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $path_info = (strpos($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;REQUEST_URI&#39;&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) ? strstr($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;REQUEST_URI&#39;&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) : $_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;REQUEST_URI&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(strstr($path_info,&lt;span class=&quot;string&quot;&gt;&quot;/v1&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;v1/index.php&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;elseif&lt;/span&gt;(strstr($path_info,&lt;span class=&quot;string&quot;&gt;&quot;/v2&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;v2/index.php&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;使用Toro实现RESTFUL-API&quot;&gt;&lt;a href=&quot;#使用Toro实现RESTFUL-API&quot; class=&quot;headerlink&quot; title=&quot;使用Toro实现RESTFUL API&quot;&gt;&lt;/a&gt;使用Toro实现RESTFUL API&lt;/h1&gt;&lt;p&gt;通过上面的步骤，我们已经能够使&lt;code&gt;http: //api.dxjia.cn/v1/&lt;/code&gt;这样的访问正确跳转到&lt;code&gt;api/v1/index.php&lt;/code&gt;上来了，接下来就是要实现restful接口了。&lt;br&gt;因为我的接口并不是很多，所以选择了轻量的ToroPHP开源库，其github地址：&lt;a href=&quot;https://github.com/anandkunal/ToroPHP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/anandkunal/ToroPHP&lt;/a&gt; ，该库代码只有100多行，利用了router与动态访问特性（类似java的反射），可以非常轻松的实现RestFul接口。具体可以查看他的开源介绍。&lt;/p&gt;
&lt;h2 id=&quot;引入ToroPHP&quot;&gt;&lt;a href=&quot;#引入ToroPHP&quot; class=&quot;headerlink&quot; title=&quot;引入ToroPHP&quot;&gt;&lt;/a&gt;引入ToroPHP&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将&lt;a href=&quot;https://github.com/anandkunal/ToroPHP/tree/master/src&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/anandkunal/ToroPHP/tree/master/src&lt;/a&gt; 下的Toro.php复制到v1目录下，并在该目录下的index.php中进行require。&lt;/li&gt;
&lt;li&gt;修改Toro.php，去掉访问路径中的/v1，&lt;strong&gt; 如果是在api目录下，不引入v1和v2目录的话，其实直接将Toro.php复制过来就可以正常工作啦 &lt;/strong&gt;，但引入v1和v2目录后，要想让Toro在&lt;code&gt;api/v1&lt;/code&gt;和&lt;code&gt;api/v2&lt;/code&gt;目录下正常工作，需要去掉访问路径中的&lt;code&gt;/v1&lt;/code&gt;和&lt;code&gt;/v2&lt;/code&gt;，如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$path_temp = $path_info;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$checkHead = substr($path_temp, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($checkHead) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strstr($checkHead, &lt;span class=&quot;string&quot;&gt;&#39;/v1&#39;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 截取掉/v1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $path_info = substr($path_temp, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strlen($path_info) === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $path_info = &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;创建handler&quot;&gt;&lt;a href=&quot;#创建handler&quot; class=&quot;headerlink&quot; title=&quot;创建handler&quot;&gt;&lt;/a&gt;创建handler&lt;/h2&gt;&lt;p&gt;ToroPHP的设计原则是一个url对应一个handler，比如对于http: //api.dxjia.cn/v0/这个url我们让其指向HelloWorld.php，那么我们需要创建这个文件，并单独一个类：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloHandler&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello, world&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;等建立关联后，使用url访问，会直接自动调用这里的get方法。&lt;br&gt;当然也可以建立post，具体可以参照它的页面。&lt;/p&gt;
&lt;h2 id=&quot;建立路由&quot;&gt;&lt;a href=&quot;#建立路由&quot; class=&quot;headerlink&quot; title=&quot;建立路由&quot;&gt;&lt;/a&gt;建立路由&lt;/h2&gt;&lt;p&gt;创建好handler之后，我们需要在index.php中为其与url建立路由关系，很简单如下：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;handlers/HelloHandler.php&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Toro.php&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Toro::serve(&lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;HelloHandler&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;路由关系都是在一起建立的，如下还增加了其他接个API接口：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;handlers/HelloHandler.php&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;handlers/UserHandler.php&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;handlers/UsersHandler.php&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;handlers/BookHandler.php&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Toro.php&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Toro::serve(&lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;HelloHandler&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;/users&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;UsersHandler&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 获取所有用户列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;/users/:number&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;UserHandler&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 获取指定id的用户信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;/users/:number/book/:alpha&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;BookHandler&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 获取指定id的用户所拥有的指定名字的book信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多的使用方法请参考我的示例，或者ToroPHP的官网&lt;/p&gt;
&lt;h1 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h1&gt;&lt;p&gt;因为v1目录本身我自己正在使用，所以这里使用&lt;code&gt;v0&lt;/code&gt;目录来进行示例，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://api.dxjia.cn/v0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://api.dxjia.cn/v0/users&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://api.dxjia.cn/v0/users/10001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://api.dxjia.cn/v0/users/10001/book/God&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码共享在github上了：&lt;a href=&quot;https://github.com/dxjia/restful-api-example-use-torophp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;restful-api-example-use-torophp&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;p&gt;[ 1 ] 《RESTful API 设计指南》 &lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/restful_api.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2014/05/restful_api.html&lt;/a&gt;&lt;br&gt;[ 2 ] 《ToroPHP》&lt;a href=&quot;https://github.com/anandkunal/ToroPHP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/anandkunal/ToroPHP&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这个blog建立有一段时间了，空间是购买的万网（现在归阿里云）的虚拟空间，OS是linux虚拟主机，之前使用wordpress直接搭建的，后来改为hexo静态博客，当时并没有多想，只想着早点搭起博客，所以将wordpress直接安装在空间的 &lt;strong&gt; 根目录 &lt;/strong&gt; 下了。&lt;br&gt;而最近自己在练习做一个Android客户端，有完整的后台接口和APP需求文档，后台的接口为APP提供登录、注册、信息获取等一系列操作。再去买空间不太现实，所以只能将接口实现在blog同目录下，以空间子目录的形式进行实现。&lt;br&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="PHP" scheme="http://dxjia.cn/tags/PHP/"/>
    
      <category term="API" scheme="http://dxjia.cn/tags/API/"/>
    
      <category term="RESTFUL" scheme="http://dxjia.cn/tags/RESTFUL/"/>
    
  </entry>
  
  <entry>
    <title>Android上传图片，PHP接收</title>
    <link href="http://dxjia.cn/2016/04/06/android-upload-picture-php-receive/"/>
    <id>http://dxjia.cn/2016/04/06/android-upload-picture-php-receive/</id>
    <published>2016-04-06T13:39:13.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;上传图片到服务器是一个很常见的需求，这里给出一种简单的实现方式：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;服务器端&quot;&gt;&lt;a href=&quot;#服务器端&quot; class=&quot;headerlink&quot; title=&quot;服务器端&quot;&gt;&lt;/a&gt;服务器端&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$target_path  = &lt;span class=&quot;string&quot;&gt;&quot;./upload/&quot;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//接收文件目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$target_path = $target_path.basename( $_FILES[&lt;span class=&quot;string&quot;&gt;&#39;uploadedfile&#39;&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(move_uploaded_file($_FILES[&lt;span class=&quot;string&quot;&gt;&#39;uploadedfile&#39;&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;tmp_name&#39;&lt;/span&gt;], $target_path)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;The file &quot;&lt;/span&gt;.basename( $_FILES[&lt;span class=&quot;string&quot;&gt;&#39;uploadedfile&#39;&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;]).&lt;span class=&quot;string&quot;&gt;&quot; has been uploaded&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;There was an error uploading the file, please try again!&quot;&lt;/span&gt;.$_FILES[&lt;span class=&quot;string&quot;&gt;&#39;uploadedfile&#39;&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码保存为 &lt;code&gt;FileUploader.php&lt;/code&gt;,放入服务器的&lt;code&gt;api\datas&lt;/code&gt;目录，并在该目录下新建 &lt;code&gt;upload&lt;/code&gt;文件夹；当然你也可以直接在PHP代码中检查是否有&lt;code&gt;upload&lt;/code&gt;目录，没有可以直接使用代码新建。&lt;br&gt;这样操作之后，我们的要上传文件操作的URL就为：&lt;code&gt;http://dxjia.cn/api/datas/FileUploader.php&lt;/code&gt;，你也可以按照此方法来制定你自己的访问URL。&lt;/p&gt;
&lt;h1 id=&quot;Android客户端&quot;&gt;&lt;a href=&quot;#Android客户端&quot; class=&quot;headerlink&quot; title=&quot;Android客户端&quot;&gt;&lt;/a&gt;Android客户端&lt;/h1&gt;&lt;p&gt;测试图片路径直接hardcode写死啦:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String srcPath = &lt;span class=&quot;string&quot;&gt;&quot;/sdcard/test.jpg&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String actionUrl = &lt;span class=&quot;string&quot;&gt;&quot;http://dxjia.cn/api/datas/FileUpload.php&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;绑定按钮&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mUpdateHandler = new UpdateHandler(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;testButton.setOnClickListener(new View.OnClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onClick(View v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        doAction();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;网络操作不能在主线程中进行，需要新开thread&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private void doAction() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    new Thread(new Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            uploadFile(actionUrl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主体函数，完成文件上传post，注意&lt;code&gt;form-data; name=\&amp;quot;uploadedfile\&amp;quot;&lt;/code&gt;，跟服务器端的必须保持一致。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/* 上传文件至Server，uploadUrl：接收文件的处理页面 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private void uploadFile(String uploadUrl) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mUpdateHandler.sendEmptyMessage(EVENT_POST_START);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String end = &amp;quot;\r\n&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String twoHyphens = &amp;quot;--&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String boundary = &amp;quot;******&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        URL url = new URL(uploadUrl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        HttpURLConnection httpURLConnection = (HttpURLConnection) url&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .openConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 允许输入输出流&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        httpURLConnection.setDoInput(true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        httpURLConnection.setDoOutput(true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        httpURLConnection.setUseCaches(false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 使用POST方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        httpURLConnection.setRequestMethod(&amp;quot;POST&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        httpURLConnection.setRequestProperty(&amp;quot;Connection&amp;quot;, &amp;quot;Keep-Alive&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        httpURLConnection.setRequestProperty(&amp;quot;Charset&amp;quot;, &amp;quot;UTF-8&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        httpURLConnection.setRequestProperty(&amp;quot;Content-Type&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;quot;multipart/form-data;boundary=&amp;quot; + boundary);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DataOutputStream dos = new DataOutputStream(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                httpURLConnection.getOutputStream());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dos.writeBytes(twoHyphens + boundary + end);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dos.writeBytes(&amp;quot;Content-Disposition: form-data; name=\&amp;quot;uploadedfile\&amp;quot;; filename=\&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                + srcPath.substring(srcPath.lastIndexOf(&amp;quot;/&amp;quot;) + 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                + &amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                + end);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dos.writeBytes(end);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FileInputStream fis = new FileInputStream(srcPath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        byte[] buffer = new byte[8192]; // 8k&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int count = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 读取文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        while ((count = fis.read(buffer)) != -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dos.write(buffer, 0, count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fis.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dos.writeBytes(end);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dos.writeBytes(twoHyphens + boundary + twoHyphens + end);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dos.flush();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        InputStream is = httpURLConnection.getInputStream();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        InputStreamReader isr = new InputStreamReader(is, &amp;quot;utf-8&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BufferedReader br = new BufferedReader(isr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String result = br.readLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.d(&amp;quot;dxjia&amp;quot;, result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mUpdateHandler.sendEmptyMessage(EVENT_POST_SUCCESS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dos.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        is.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mUpdateHandler.sendEmptyMessage(EVENT_POST_FAILED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更新UI的handler&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * UI update handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private class UpdateHandler extends Handler &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private final Context mContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public UpdateHandler(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mContext = context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void handleMessage(Message msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        switch (msg.what) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case EVENT_POST_START:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                resultTextView.setText(&amp;quot;Started! uploading...&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case EVENT_POST_FAILED:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                resultTextView.setText(&amp;quot;upload failed!&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case EVENT_POST_SUCCESS:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                resultTextView.setText(&amp;quot;upload done!&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.handleMessage(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;p&gt;[1]. &lt;a href=&quot;http://blog.csdn.net/sxwyf248/article/details/7012496&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/sxwyf248/article/details/7012496&lt;/a&gt;&lt;br&gt;[2]. &lt;a href=&quot;http://blog.csdn.net/fancylovejava/article/details/13506745&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/fancylovejava/article/details/13506745&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;上传图片到服务器是一个很常见的需求，这里给出一种简单的实现方式：&lt;br&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="Android" scheme="http://dxjia.cn/tags/Android/"/>
    
      <category term="Java" scheme="http://dxjia.cn/tags/Java/"/>
    
      <category term="PHP" scheme="http://dxjia.cn/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>转:一种动态为apk写入信息的方案</title>
    <link href="http://dxjia.cn/2016/03/25/write-comment-to-apk-file/"/>
    <id>http://dxjia.cn/2016/03/25/write-comment-to-apk-file/</id>
    <published>2016-03-25T09:14:56.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;天猫无线的工程师分享的一篇文章，写的非常好，转载到自己的博客享用。&lt;br&gt;原址：&lt;a href=&quot;http://pingguohe.net/2016/03/21/Dynimac-write-infomation-into-apk.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pingguohe.net/2016/03/21/Dynimac-write-infomation-into-apk.html&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;我们在日常使用应用可能会遇到以下场景。&lt;br&gt;场景1：&lt;br&gt;用户浏览h5页面时看到一个页面，下载安装app后启动会来到首页而不是用户之前浏览的页面，造成使用场景的割裂。&lt;/p&gt;
&lt;p&gt;场景2：&lt;br&gt;用户通过二维码把一个页面分享出去，没有装猫客的用户如果直接安装启动之后无法回到分享的页面。&lt;/p&gt;
&lt;p&gt;如果用户在当前页面下载了应用，安装之后直接跳转到刚才浏览的界面，不仅可以将这一部分流量引回客户端，还可以让用户获得完整的用户体验。下面提出一种方案来满足这个业务需求。&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;p&gt;android使用的apk包的压缩方式是&lt;a href=&quot;https://en.wikipedia.org/wiki/Zip_(file_format&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zip&lt;/a&gt;)，与zip有相同的文件结构，在zip的Central directory file header中包含一个File comment区域，可以存放一些数据。File comment是zip文件如果可以正确的修改这个部分，就可以在不破坏压缩包、不用重新打包的的前提下快速的给apk文件写入自己想要的数据。&lt;br&gt;comment是在Central directory file header末尾储存的，可以将数据直接写在这里，下&lt;a href=&quot;https://en.wikipedia.org/wiki/Zip_(file_format&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;表&lt;/a&gt;#File_headers)是header末尾的结构。&lt;br&gt;&lt;img src=&quot;http://7xqitw.com1.z0.glb.clouddn.com/blog-res-zip-commet-architictur.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于数据是不确定的，我们无法知道comment的长度，从表中可以看到zip定义comment的长度的位置在comment之前，所以无法从zip中直接获取comment的长度。这里我们需要自定义comment的长度，在自定义comment内容的后面添加一个区域储存comment的长度，结构如下图。&lt;br&gt;&lt;img src=&quot;http://7xqitw.com1.z0.glb.clouddn.com/blog-res-zip-comments.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;这里可以将一个固定的结构写在comment中，然后根据自定义的长度分区获取每个部分的内容，还可以添加其它数据，如校验码、版本等。&lt;/p&gt;
&lt;h1 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h1&gt;&lt;h2 id=&quot;将数据写入comment&quot;&gt;&lt;a href=&quot;#将数据写入comment&quot; class=&quot;headerlink&quot; title=&quot;将数据写入comment&quot;&gt;&lt;/a&gt;将数据写入comment&lt;/h2&gt;&lt;p&gt;这一部分可以在本地进行，需要定义一个长度为2的byte[]来储存comment的长度，直接使用Java的api就可以把comment和comment的长度写到apk的末尾，代码如下。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;writeApk&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(File file, String comment)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ZipFile zipFile = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ByteArrayOutputStream outputStream = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RandomAccessFile accessFile = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        zipFile = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ZipFile(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String zipComment = zipFile.getComment();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (zipComment != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] byteComment = comment.getBytes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        outputStream = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ByteArrayOutputStream();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        outputStream.write(byteComment);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        outputStream.write(short2Stream((&lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt;) byteComment.length));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] data = outputStream.toByteArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        accessFile = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RandomAccessFile(file, &lt;span class=&quot;string&quot;&gt;&quot;rw&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        accessFile.seek(file.length() - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        accessFile.write(short2Stream((&lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt;) data.length));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        accessFile.write(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (zipFile != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                zipFile.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (outputStream != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                outputStream.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (accessFile != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                accessFile.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;读取apk包中的comment数据&quot;&gt;&lt;a href=&quot;#读取apk包中的comment数据&quot; class=&quot;headerlink&quot; title=&quot;读取apk包中的comment数据&quot;&gt;&lt;/a&gt;读取apk包中的comment数据&lt;/h2&gt;&lt;p&gt;首先获取apk的路径，通过context中的getPackageCodePath()方法就可以获取，代码如下。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getPackagePath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (context != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; context.getPackageCodePath();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;获取路径之后就可以读取comment的内容了，这里不能直接使用ZipFile中的getComment()方法直接获取comment，因为这个方法是Java7中的方法，&lt;strong&gt;在android4.4之前是不支持Java7的&lt;/strong&gt;，所以我们需要自己去读取apk文件中的comment。首先根据之前自定义的结构，先读取写在最后的comment的长度，根据这个长度，才可以获取真正comment的内容，代码如下。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;readApk&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(File file)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RandomAccessFile accessFile = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RandomAccessFile(file, &lt;span class=&quot;string&quot;&gt;&quot;r&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; index = accessFile.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bytes = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index = index - bytes.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        accessFile.seek(index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        accessFile.readFully(bytes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; contentLength = stream2Short(bytes, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bytes = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[contentLength];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index = index - bytes.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        accessFile.seek(index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        accessFile.readFully(bytes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(bytes, &lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (FileNotFoundException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的stream2Short()和short2Stream()参考了MultiChannelPackageTool中的方法。&lt;/p&gt;
&lt;h1 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h1&gt;&lt;p&gt;在生成apk后，调用下面的代码写入我们想要的数据，&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;File file = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;string&quot;&gt;&quot;/Users/zhaolin/app-debug.apk&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;writeApk(file, &lt;span class=&quot;string&quot;&gt;&quot;test comment&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装这个apk之后运行，让comment显示在屏幕上，运行结果如下。&lt;br&gt;&lt;img src=&quot;http://7xqitw.com1.z0.glb.clouddn.com/blog-res-write-commets-to-apk-screenshoot.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;运行结果符合预期，安装包也没有被破坏，可以正常安装。&lt;/p&gt;
&lt;h1 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;通过修改comment将数据传递给APP的方案是可行的，由于是修改apk自有的数据，并不会对apk造成破坏，修改后可以正常安装。&lt;/li&gt;
&lt;li&gt;这种方案不用重新打包apk，并且在服务端只是写文件的操作，效率很高，可以适用于动态生成apk的场景。&lt;/li&gt;
&lt;li&gt;可以通过这个方案进行h5到APP的引流，用户操作不会产生割裂感，保证用户体验的统一。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mcxiaoke/packer-ng-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;packer-ng-plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/seven456/MultiChannelPackageTool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MultiChannelPackageTool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;天猫无线的工程师分享的一篇文章，写的非常好，转载到自己的博客享用。&lt;br&gt;原址：&lt;a href=&quot;http://pingguohe.net/2016/03/21/Dynimac-write-infomation-into-apk.html&quot;&gt;http://pingguohe.net/2016/03/21/Dynimac-write-infomation-into-apk.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="Android" scheme="http://dxjia.cn/tags/Android/"/>
    
      <category term="Java" scheme="http://dxjia.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用Android Studio(Intellij)阅读AOSP源码</title>
    <link href="http://dxjia.cn/2016/03/18/read-aosp-source-through-intellij/"/>
    <id>http://dxjia.cn/2016/03/18/read-aosp-source-through-intellij/</id>
    <published>2016-03-18T06:27:47.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;Android Studio&lt;/code&gt;是Google推出的基于&lt;code&gt;Intellij&lt;/code&gt;二次开发的IDE，用来替代之前的&lt;code&gt;eclipse+ADT&lt;/code&gt;的开发方式，Studio针对Android开发提供了大量的优化，用起来非常方便，是开发APK的IDE不二之选。而本文来描述如何使用Android Studio或者Intellij来阅读Android的整个源码。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;之前一直是使用Source Insight来读源码的，这也是一个非常不错的Project Tool，但其是收费的，而且还挺贵（当然可能用破解的偏多，但如果在正规公司就不太好用破解啦。）。它的优势是比较轻量，速度还很快，占用空间也小，但需要你自己一点点区分module，它仅仅是作为一个代码阅读器，并不会像一个真正的IDE一样帮你区分模块，Android的模块又是那么的多，有时候经常并不清楚这个调用实现在哪个模块，只能自己去找，除非你把整个Android代码都加了进来，并全局搜索，而且很多时候关联跳转并不好。So，我们需要Android Studio….&lt;/p&gt;
&lt;p&gt;进入正题：作为IDE很重要的一个功能是为你的project区分好模块，然后根据模块建立索引，而AOSP源码里就帮我们提供了这样的工具，我们要做的就是使用这个工具，生成Android Studio和Intellij可以使用的工程文件。&lt;/p&gt;
&lt;h1 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h1&gt;&lt;h2 id=&quot;编译AOSP&quot;&gt;&lt;a href=&quot;#编译AOSP&quot; class=&quot;headerlink&quot; title=&quot;编译AOSP&quot;&gt;&lt;/a&gt;编译AOSP&lt;/h2&gt;&lt;p&gt;完整编译一次AOSP，这样做的目的是为了生成&lt;code&gt;idegen&lt;/code&gt;工具需要使用到的jar包 – &lt;code&gt;idegen.jar&lt;/code&gt;。&lt;br&gt;如果你&lt;code&gt;make&lt;/code&gt;成功之后，发现在&lt;code&gt;/out/host/linux-x86/framework&lt;/code&gt;目录下没有生成这个文件，那么可以自己手动编译，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd development/tools/idegen/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这之后就会生成&lt;code&gt;idegen.jar&lt;/code&gt;。 &lt;/p&gt;
&lt;h2 id=&quot;执行idegen-sh&quot;&gt;&lt;a href=&quot;#执行idegen-sh&quot; class=&quot;headerlink&quot; title=&quot;执行idegen.sh&quot;&gt;&lt;/a&gt;执行idegen.sh&lt;/h2&gt;&lt;p&gt;在源码根目录执行：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;development/tools/idegen/idegen.sh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;耐心等待，过一会就会在根目录下生成两个文件，&lt;code&gt;android.iml&lt;/code&gt;和&lt;code&gt;android.ipr&lt;/code&gt;，这就是我们需要的。&lt;/p&gt;
&lt;h2 id=&quot;使用Intellij-Android-Studio打开工程文件&quot;&gt;&lt;a href=&quot;#使用Intellij-Android-Studio打开工程文件&quot; class=&quot;headerlink&quot; title=&quot;使用Intellij/Android Studio打开工程文件&quot;&gt;&lt;/a&gt;使用Intellij/Android Studio打开工程文件&lt;/h2&gt;&lt;p&gt;打开Intellij和Android Studio，&lt;code&gt;File-&amp;gt;open-&amp;gt;android.ipr&lt;/code&gt;，或者Andoird Stuido， &lt;code&gt;Open an existing Android Studio project -&amp;gt; android.ipr所在目录&lt;/code&gt;, 之后就是漫长的等待，需要花很久的时间建立索引。&lt;/p&gt;
&lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h2&gt;&lt;p&gt;图片用的别人的，原址不可靠了，在此感谢。&lt;br&gt;&lt;img src=&quot;http://7xqitw.com1.z0.glb.clouddn.com/blog/res/android-stuido-read-aosp.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;idegen-jar&quot;&gt;&lt;a href=&quot;#idegen-jar&quot; class=&quot;headerlink&quot; title=&quot;idegen.jar&quot;&gt;&lt;/a&gt;idegen.jar&lt;/h1&gt;&lt;p&gt;我将我编译出的&lt;code&gt;idegen.jar&lt;/code&gt;放在了github上，地址: &lt;a href=&quot;https://github.com/dxjia/common-tools/tree/master/read_aosp_through_intellij&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;read_aosp_through_intellij&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Android Studio&lt;/code&gt;是Google推出的基于&lt;code&gt;Intellij&lt;/code&gt;二次开发的IDE，用来替代之前的&lt;code&gt;eclipse+ADT&lt;/code&gt;的开发方式，Studio针对Android开发提供了大量的优化，用起来非常方便，是开发APK的IDE不二之选。而本文来描述如何使用Android Studio或者Intellij来阅读Android的整个源码。&lt;br&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="Android" scheme="http://dxjia.cn/tags/Android/"/>
    
      <category term="Intellij" scheme="http://dxjia.cn/tags/Intellij/"/>
    
      <category term="IDE" scheme="http://dxjia.cn/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>Demo Mode for the Android System UI</title>
    <link href="http://dxjia.cn/2016/03/10/aosp-demo-mode-for-system-ui/"/>
    <id>http://dxjia.cn/2016/03/10/aosp-demo-mode-for-system-ui/</id>
    <published>2016-03-10T01:20:40.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt; Reference to aosp\frameworks\base\packages\SystemUI\README &lt;/strong&gt;&lt;br&gt;Demo mode for the status bar allows you to force the status bar into a fixed state, useful for taking screenshots with a consistent status bar state, or testing different status icon permutations. Demo mode is available in recent versions of Android.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Enabling-demo-mode&quot;&gt;&lt;a href=&quot;#Enabling-demo-mode&quot; class=&quot;headerlink&quot; title=&quot;Enabling demo mode&quot;&gt;&lt;/a&gt;Enabling demo mode&lt;/h1&gt;&lt;p&gt;Demo mode is protected behind a system setting. To enable it for a device, run:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb shell settings put global sysui_demo_allowed 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Protocol&quot;&gt;&lt;a href=&quot;#Protocol&quot; class=&quot;headerlink&quot; title=&quot;Protocol&quot;&gt;&lt;/a&gt;Protocol&lt;/h1&gt;&lt;p&gt;The protocol is based on broadcast intents, and thus can be driven via the command line (&lt;code&gt;adb shell am broadcast&lt;/code&gt;) or an app (&lt;code&gt;Context.sendBroadcast&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;Broadcast-action&quot;&gt;&lt;a href=&quot;#Broadcast-action&quot; class=&quot;headerlink&quot; title=&quot;Broadcast action&quot;&gt;&lt;/a&gt;Broadcast action&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;com.android.systemui.demo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Commands&quot;&gt;&lt;a href=&quot;#Commands&quot; class=&quot;headerlink&quot; title=&quot;Commands&quot;&gt;&lt;/a&gt;Commands&lt;/h2&gt;&lt;p&gt;Commands and subcommands (below) are sent as string extras in the broadcast&lt;br&gt;intent.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Commands are sent as string extras with key &lt;code&gt;command&lt;/code&gt; (required). Possible values are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Subcommand&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;enter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Enters demo mode, bar state allowed to be modified (for convenience, any of the other non-exit commands will automatically flip demo mode on, no need to call this explicitly in practice)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Exits demo mode, bars back to their system-driven state&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;battery&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Control the battery display&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;level&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets the battery level (0 - 100)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;plugged&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets charging state (&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;network&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Control the RSSI display&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;airplane&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;show&lt;/code&gt; to show icon, any other value to hide&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fully&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets MCS state to fully connected (&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wifi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;show&lt;/code&gt; to show icon, any other value to hide&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;level&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets wifi level (null or 0-4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mobile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;show&lt;/code&gt; to show icon, any other value to hide&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;datatype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Values: &lt;code&gt;1x&lt;/code&gt;, &lt;code&gt;3g&lt;/code&gt;, &lt;code&gt;4g&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;lte&lt;/code&gt;, &lt;code&gt;roam&lt;/code&gt;, any other value to hide&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;level&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets mobile signal strength level (null or 0-4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;carriernetworkchange&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets mobile signal icon to carrier network change UX when disconnected (&lt;code&gt;show&lt;/code&gt; to show icon, any other value to hide)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sims&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets the number of sims (1-8)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;nosim&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;show&lt;/code&gt; to show icon, any other value to hide&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bars&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Control the visual style of the bars (opaque, translucent, etc)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets the bars visual style (opaque, translucent, semi-transparent)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Control the system status icons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;volume&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets the icon in the volume slot (&lt;code&gt;silent&lt;/code&gt;, &lt;code&gt;vibrate&lt;/code&gt;, any other value to hide)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bluetooth&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets the icon in the bluetooth slot (&lt;code&gt;connected&lt;/code&gt;, &lt;code&gt;disconnected&lt;/code&gt;, any other value to hide)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets the icon in the location slot (&lt;code&gt;show&lt;/code&gt;, any other value to hide)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;alarm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets the icon in the alarm_clock slot (&lt;code&gt;show&lt;/code&gt;, any other value to hide)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sync&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets the icon in the sync_active slot (&lt;code&gt;show&lt;/code&gt;, any other value to hide)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets the icon in the tty slot (&lt;code&gt;show&lt;/code&gt;, any other value to hide)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;eri&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets the icon in the cdma_eri slot (&lt;code&gt;show&lt;/code&gt;, any other value to hide)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mute&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets the icon in the mute slot (&lt;code&gt;show&lt;/code&gt;, any other value to hide)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;speakerphone&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets the icon in the speakerphone slot (&lt;code&gt;show&lt;/code&gt;, any other value to hide)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;notifications&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Control the notification icons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;visible&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt; to hide the notification icons, any other value to show&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;clock&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Control the clock display&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;millis&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets the time in millis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hhmm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sets the time in hh:mm&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;Examples&quot;&gt;&lt;a href=&quot;#Examples&quot; class=&quot;headerlink&quot; title=&quot;Examples&quot;&gt;&lt;/a&gt;Examples&lt;/h1&gt;&lt;p&gt;Enter demo mode&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb shell am broadcast -a com.android.systemui.demo -e command enter&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Exit demo mode&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb shell am broadcast -a com.android.systemui.demo -e command exit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Set the clock to 12:31&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb shell am broadcast -a com.android.systemui.demo -e command clock -e hhmm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1231&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Set the wifi level to max&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb shell am broadcast -a com.android.systemui.demo -e command network -e wifi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;show -e level 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Show the silent volume icon&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb shell am broadcast -a com.android.systemui.demo -e command status -e volume&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;silent&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Empty battery, and not charging (red exclamation point)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb shell am broadcast -a com.android.systemui.demo -e command battery -e level&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 -e plugged false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Hide the notification icons&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb shell am broadcast -a com.android.systemui.demo -e command notifications -e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;visible false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Exit demo mode&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb shell am broadcast -a com.android.systemui.demo -e command exit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Example-demo-controller-app-in-AOSP&quot;&gt;&lt;a href=&quot;#Example-demo-controller-app-in-AOSP&quot; class=&quot;headerlink&quot; title=&quot;Example demo controller app in AOSP&quot;&gt;&lt;/a&gt;Example demo controller app in AOSP&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;frameworks/base/tests/SystemUIDemoModeController&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Example-script-for-screenshotting-purposes&quot;&gt;&lt;a href=&quot;#Example-script-for-screenshotting-purposes&quot; class=&quot;headerlink&quot; title=&quot;Example script (for screenshotting purposes)&quot;&gt;&lt;/a&gt;Example script (for screenshotting purposes)&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD=$1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if [[ $ADB == &amp;quot;&amp;quot; ]]; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ADB=adb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if [[ $CMD != &amp;quot;on&amp;quot; &amp;amp;&amp;amp; $CMD != &amp;quot;off&amp;quot; ]]; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  echo &amp;quot;Usage: $0 [on|off] [hhmm]&amp;quot; &amp;gt;&amp;amp;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  exit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if [[ &amp;quot;$2&amp;quot; != &amp;quot;&amp;quot; ]]; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  HHMM=&amp;quot;$2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ADB root || exit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ADB wait-for-devices&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ADB shell settings put global sysui_demo_allowed 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if [ $CMD == &amp;quot;on&amp;quot; ]; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $ADB shell am broadcast -a com.android.systemui.demo -e command enter || exit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if [[ &amp;quot;$HHMM&amp;quot; != &amp;quot;&amp;quot; ]]; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $ADB shell am broadcast -a com.android.systemui.demo -e command clock -e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hhmm $&amp;#123;HHMM&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $ADB shell am broadcast -a com.android.systemui.demo -e command battery -e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plugged false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $ADB shell am broadcast -a com.android.systemui.demo -e command battery -e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;level 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $ADB shell am broadcast -a com.android.systemui.demo -e command network -e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wifi show -e level 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $ADB shell am broadcast -a com.android.systemui.demo -e command network -e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mobile show -e datatype none -e level 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $ADB shell am broadcast -a com.android.systemui.demo -e command notifications&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e visible false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;elif [ $CMD == &amp;quot;off&amp;quot; ]; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $ADB shell am broadcast -a com.android.systemui.demo -e command exit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Link&quot;&gt;&lt;a href=&quot;#Link&quot; class=&quot;headerlink&quot; title=&quot;Link&quot;&gt;&lt;/a&gt;Link&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;aosp\frameworks\base\packages\SystemUI&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Reference to aosp\frameworks\base\packages\SystemUI\README &lt;/strong&gt;&lt;br&gt;Demo mode for the status bar allows you to force the status bar into a fixed state, useful for taking screenshots with a consistent status bar state, or testing different status icon permutations. Demo mode is available in recent versions of Android.&lt;/p&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="Android" scheme="http://dxjia.cn/tags/Android/"/>
    
      <category term="System UI" scheme="http://dxjia.cn/tags/System-UI/"/>
    
  </entry>
  
  <entry>
    <title>Android源码设置default application</title>
    <link href="http://dxjia.cn/2016/03/08/aosp-default-application-setting/"/>
    <id>http://dxjia.cn/2016/03/08/aosp-default-application-setting/</id>
    <published>2016-03-08T07:49:50.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;在做AOSP源码开发时，有时候为了OEM厂商，会将某些原生APP替换为厂商的APP，或者将厂商的APP设置为默认APP，本文来介绍如何在源码编译环境进行这样的功能设定。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;替换原生APP&quot;&gt;&lt;a href=&quot;#替换原生APP&quot; class=&quot;headerlink&quot; title=&quot;替换原生APP&quot;&gt;&lt;/a&gt;替换原生APP&lt;/h1&gt;&lt;p&gt;比如原生有自带一个Calculator应用，OEM出ROM时希望直接替换掉原生应用，这个时候，我们可以将厂商的APP拿过来，放在vendors目录下，然后编写&lt;code&gt;makefile&lt;/code&gt;文件，使用 &lt;code&gt;LOCAL_OVERRIDES_PACKAGES&lt;/code&gt;就可以将原生Calculator从ROM中删掉，自己取而代之，像下面这样写，后面跟要替换掉的 Module Name，这个name要去Calculator的&lt;code&gt;Android.mk&lt;/code&gt;里去看。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LOCAL_OVERRIDES_PACKAGES:= Calculator&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;保留原生，但设置自己的为开机默认&quot;&gt;&lt;a href=&quot;#保留原生，但设置自己的为开机默认&quot; class=&quot;headerlink&quot; title=&quot;保留原生，但设置自己的为开机默认&quot;&gt;&lt;/a&gt;保留原生，但设置自己的为开机默认&lt;/h1&gt;&lt;p&gt;ROM中有多个可以提供相同功能的APP时，系统在用户使用时会提示用户进行选择，而且用户可以选择某个APP作为这项功能的默认应用，这样以后使用此项功能时，直接就启动默认APP，类似于我们在Windows上装了多个浏览器软件时，某些浏览器总是会提示&lt;code&gt;我现在不是你的默认浏览器，求你设置我为你的默认&lt;/code&gt;， 噗～&lt;br&gt;那么如何在源码编译阶段就提前设置好呢，比如我们自己有一款浏览器APP，而且也不打算顶替掉原生的浏览器，但我们想提前随ROM一起设置自己为默认的浏览器软件。下面依此为例进行介绍：&lt;/p&gt;
&lt;h2 id=&quot;Andriod保存用户默认设置的地方&quot;&gt;&lt;a href=&quot;#Andriod保存用户默认设置的地方&quot; class=&quot;headerlink&quot; title=&quot;Andriod保存用户默认设置的地方&quot;&gt;&lt;/a&gt;Andriod保存用户默认设置的地方&lt;/h2&gt;&lt;p&gt;如果你了解过Android &lt;code&gt;PackageManager&lt;/code&gt;的工作方式，你会知道，Android系统将系统中所有已经安装的APP信息都记录在一个xml文件里，路径为:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/data/system/users/{&lt;em&gt;user-id&lt;/em&gt;}/package-restrictions.xml&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这个文件里，详细记录了每个APP的各种组件信息，而APP默认设置的地方就保存在类似下面的块内容里：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;preferred-activities&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/preferred-activities&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;package-restrictions.xml&lt;/code&gt;文件的生成是由&lt;code&gt;PackageManager&lt;/code&gt;在开机阶段通过遍历 data/app， system/app, system/priv-app目录，并结合源码编译阶段的另一些配置文件来生成的，这些配置文件位于&lt;code&gt;/system/etc/preferred-activities/*.xml&lt;/code&gt;目录，是编译阶段从源码中直接copy过来的，所以我们需要按格式要求书写我们的xml文件，并想办法让编译系统自动将xml文件复制到&lt;code&gt;system/etc/prefeered-activities/&lt;/code&gt;目录下：&lt;/p&gt;
&lt;h2 id=&quot;配置格式&quot;&gt;&lt;a href=&quot;#配置格式&quot; class=&quot;headerlink&quot; title=&quot;配置格式&quot;&gt;&lt;/a&gt;配置格式&lt;/h2&gt;&lt;p&gt;比如上面提到的我们有一个 浏览器APP，需要提前设置好默认，那么在我们的AOSP源码的某个地方，我们定义一个xml文件，起名为&lt;code&gt;preferred-activies-mybrowser.xml&lt;/code&gt;，内容如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;preferred-activities&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;item name=&amp;quot;com.mybrowser.MainActivity&amp;quot; match=&amp;quot;200000&amp;quot; always=&amp;quot;true&amp;quot; set=&amp;quot;2&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;set name=&amp;quot;com.mybrowser./.MainActivity&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;set name=&amp;quot;com.android.browser/.BrowserActivity&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;filter&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;action name=&amp;quot;android.intent.action.VIEW&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;cat name=&amp;quot;android.intent.category.DEFAULT&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;scheme name=&amp;quot;http&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;/filter&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;/preferred-activities&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;复制xml到etc目录&quot;&gt;&lt;a href=&quot;#复制xml到etc目录&quot; class=&quot;headerlink&quot; title=&quot;复制xml到etc目录&quot;&gt;&lt;/a&gt;复制xml到etc目录&lt;/h2&gt;&lt;p&gt;这就需要项目配置makefile，在一个合适的地方加上下面的语句：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PRODUCT_COPY_FILES +=/&amp;lt;location-of-file&amp;gt;/preferred-activities-mybrowser.xml:system/etc/preferred-apps/preferred-activities-mybrowser.xml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样编译的时候就可以自动复制xml文件啦。&lt;/p&gt;
&lt;h2 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h2&gt;&lt;p&gt;该方式也有缺点：不能对Laucher APP这么干，使用上面的方式设置自己的Laucher应用为默认，会在第一次启动的时候失效。 &lt;/p&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/34073290/set-default-application-on-aosp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/34073290/set-default-application-on-aosp&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在做AOSP源码开发时，有时候为了OEM厂商，会将某些原生APP替换为厂商的APP，或者将厂商的APP设置为默认APP，本文来介绍如何在源码编译环境进行这样的功能设定。&lt;br&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="Android" scheme="http://dxjia.cn/tags/Android/"/>
    
      <category term="AOSP" scheme="http://dxjia.cn/tags/AOSP/"/>
    
  </entry>
  
  <entry>
    <title>使用python自动打包hexo网站并上传</title>
    <link href="http://dxjia.cn/2016/03/07/python-zip-ftp-upload/"/>
    <id>http://dxjia.cn/2016/03/07/python-zip-ftp-upload/</id>
    <published>2016-03-07T03:18:56.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;网页空间是买的虚拟主机，不支持git部署，每次写完博客，都需要自己手动上传到空间，尽管hexo有ftpsync的插件可以做ftp上传，但用了几次总是有问题，而且我的网站也有在github上部署，配置在_config.xml里会泄漏ftp信息。自己手动上传也有诸多问题，首先遍历比较多，慢不说，还比较容易出现文件错误，尤其中文文件。所以后来就先在本地手动打包为一整个zip压缩包，再上传到空间，然后再去空间解压覆盖，这样比较安全放心。&lt;br&gt;下面介绍我目前使用的这种方式，利用phthon脚本打包hexo public(生成的整个网页文件)目录，然后上传。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;新建-zip-ftp-deploy-py&quot;&gt;&lt;a href=&quot;#新建-zip-ftp-deploy-py&quot; class=&quot;headerlink&quot; title=&quot;新建 zip-ftp-deploy.py&quot;&gt;&lt;/a&gt;新建 zip-ftp-deploy.py&lt;/h2&gt;&lt;p&gt;代码如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#encoding: utf-8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__author__ = &amp;apos;dxjia&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__mail__ = &amp;apos;jdxwind@dxjia.cn&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__date__ = &amp;apos;2016-03-07&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__version = 1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import os, os.path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import zipfile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from ftplib import FTP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#全局变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PUBLIC_FOLDER_NAME = &amp;apos;public&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#目标压缩包文件名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TARGET_ZIP_FILE_NAME = &amp;apos;a-ftp-deplog.zip&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#FTP参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FTP_IP = &amp;quot;网站FTP IP地址&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FTP_USER_NAME = &amp;apos;用户名&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FTP_PASSWORD = &amp;apos;密码&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FTP_TARGET_FOLDER = &amp;apos;htdocs&amp;apos; #网站目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#打包函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def zip_dir(dirname, zipfilename):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filelist = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if os.path.isfile(dirname):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        filelist.append(dirname)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for root, dirs, files in os.walk(dirname):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for name in files:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                filelist.append(os.path.join(root, name))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    zf = zipfile.ZipFile(zipfilename, &amp;quot;w&amp;quot;, zipfile.zlib.DEFLATED)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for tar in filelist:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        arcname = tar[len(dirname):]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        zf.write(tar,arcname)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    zf.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if __name__ == &amp;apos;__main__&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public_path = os.path.join(os.getcwd(), PUBLIC_FOLDER_NAME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    zip_file_path = os.path.join(os.getcwd(), TARGET_ZIP_FILE_NAME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if os.path.exists(public_path):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        zip_dir(public_path, zip_file_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print &amp;quot;have no public folder, please excute \&amp;apos;hexo g\&amp;apos; first&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if os.path.exists(zip_file_path):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ftp = FTP(FTP_IP)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ftp.login(FTP_USER_NAME, FTP_PASSWORD)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ftp.cwd(FTP_TARGET_FOLDER)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        f = open(zip_file_path, &amp;apos;rb&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ftp.storbinary(&amp;apos;STOR %s&amp;apos; % TARGET_ZIP_FILE_NAME, f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        f.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ftp.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        os.remove(zip_file_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print &amp;quot;failed&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在全局变量部分配置好你的FTP信息，然后使用python执行这个脚本就可以了。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python zip-ftp-deploy.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p&gt;这样，在每次写完新的文章之后，按照下面的步骤来操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hexo g -d     // 生成网页，并部署到github&lt;/li&gt;
&lt;li&gt;git add ./&lt;/li&gt;
&lt;li&gt;git commit -m “new post”&lt;/li&gt;
&lt;li&gt;git push      // 上传hexo源码到github&lt;/li&gt;
&lt;li&gt;python zip-ftp-deploy.py     // 打包public目录，并上传到网站空间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后每隔一段时间，登陆到网站后台，解压缩你上传的zip包到网页根目录即可更新。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：别忘记将&lt;code&gt;zip-ftp-deploy.py&lt;/code&gt;加入 gitignore哦。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;上传在GitHub上：&lt;a href=&quot;https://github.com/dxjia/common-tools/blob/master/python-ftp-deploy/zip-ftp-deploy.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;python-ftp-deploy&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;网页空间是买的虚拟主机，不支持git部署，每次写完博客，都需要自己手动上传到空间，尽管hexo有ftpsync的插件可以做ftp上传，但用了几次总是有问题，而且我的网站也有在github上部署，配置在_config.xml里会泄漏ftp信息。自己手动上传也有诸多问题，首先遍历比较多，慢不说，还比较容易出现文件错误，尤其中文文件。所以后来就先在本地手动打包为一整个zip压缩包，再上传到空间，然后再去空间解压覆盖，这样比较安全放心。&lt;br&gt;下面介绍我目前使用的这种方式，利用phthon脚本打包hexo public(生成的整个网页文件)目录，然后上传。&lt;br&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="hexo" scheme="http://dxjia.cn/tags/hexo/"/>
    
      <category term="python" scheme="http://dxjia.cn/tags/python/"/>
    
      <category term="blog" scheme="http://dxjia.cn/tags/blog/"/>
    
      <category term="ftp" scheme="http://dxjia.cn/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>在gradle中为release版本配置签名</title>
    <link href="http://dxjia.cn/2016/03/04/config-signature-in-gradle-for-release-version/"/>
    <id>http://dxjia.cn/2016/03/04/config-signature-in-gradle-for-release-version/</id>
    <published>2016-03-04T08:05:02.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;任何一个Android APK 发布之前都会进行签名，没有签名的APK是无法在Android device上进行安装和使用的，而且对于发布到Google Play上的同一个应用，自始至终必须使用同一个签名文件，所以必须保存好签名文件。本文介绍如何在&lt;code&gt;build.gradle&lt;/code&gt;中为release版本配置签名文件，这样在打包release版本时可以自动进行签名。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;签名文件&quot;&gt;&lt;a href=&quot;#签名文件&quot; class=&quot;headerlink&quot; title=&quot;签名文件&quot;&gt;&lt;/a&gt;签名文件&lt;/h2&gt;&lt;p&gt;签名APK首先需要一个签名文件，可以使用工具生成，或者使用Android Studio生成，Android使用的签名机制源自JAVA，签名文件可以使用JDK的工具进行生成：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;keytool -genkey -alias dxjia -keyalg RSA -validity 20000 -keystore app.keystore&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以管理员运行命令行，切换到JDK的bin目录下执行命令，否则&lt;code&gt;-keystore&lt;/code&gt; 指定的文件名安排在其他非系统盘符目录，当然，如果你的JDK没有安装在系统盘，这个问题就不用担心。&lt;br&gt;&lt;img src=&quot;http://7xqitw.com1.z0.glb.clouddn.com/keytool.png&quot; alt=&quot;keytool command&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中参数&lt;code&gt;-alias&lt;/code&gt;后为别名，这个参数在签名APK时需要用到，最后一行输入的密钥口令是这个别名的密码，和一开始输入的密钥库口令，两个密码在签名时也会用到。&lt;code&gt;-validity&lt;/code&gt;为证书有效天数，是的，证书有时间效力。在输入密码时没有回显(尽管输就是啦) 并且 退格,tab等都会被当作密码内容.&lt;/p&gt;
&lt;h2 id=&quot;在gradle中进行配置&quot;&gt;&lt;a href=&quot;#在gradle中进行配置&quot; class=&quot;headerlink&quot; title=&quot;在gradle中进行配置&quot;&gt;&lt;/a&gt;在gradle中进行配置&lt;/h2&gt;&lt;p&gt;在android的gradle环境中，android提供了可以直接用于给release版本签名的变量，我们可以直接使用。&lt;/p&gt;
&lt;h3 id=&quot;明文配置&quot;&gt;&lt;a href=&quot;#明文配置&quot; class=&quot;headerlink&quot; title=&quot;明文配置&quot;&gt;&lt;/a&gt;明文配置&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    defaultConfig &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signingConfigs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        release &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            storeFile file(&amp;quot;C\:\\Users\\.android\\app.keystore&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            storePassword &amp;quot;123456789&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            keyAlias &amp;quot;dxjia&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            keyPassword &amp;quot;987654321&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buildTypes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        release &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            signingConfig signingConfigs.release&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样在打包release版本时就会自动签名了。&lt;/p&gt;
&lt;h3 id=&quot;隐藏密码&quot;&gt;&lt;a href=&quot;#隐藏密码&quot; class=&quot;headerlink&quot; title=&quot;隐藏密码&quot;&gt;&lt;/a&gt;隐藏密码&lt;/h3&gt;&lt;p&gt;如果你的代码不会开源，或者是公司项目，公司会保护的很好，那么直接用上面的方式就可以了。但如果是开源项目，那么上面的写法就不太可取了 ，因为这样直接配置会暴露密码啊。接下来介绍如果隐藏密码进行配置：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;利用&lt;code&gt;property&lt;/code&gt;，将密码和签名文件路径信息保存在项目根目录的&lt;code&gt;local.properties&lt;/code&gt;文件里，因为这个文件一般都在&lt;code&gt;.gitignore&lt;/code&gt;里自动配置了，所以不会上传出去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;在根目录的&lt;/strong&gt;&lt;code&gt;local.properties&lt;/code&gt;文件中配置以下内容：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;keystore.path=C\:\\Users\\.android\\app.keyset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keystore.password=123456789&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keystore.alias=monkey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keystore.alias_password=987654321&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在你的&lt;strong&gt;app&lt;/strong&gt;目录的&lt;code&gt;build.gradle&lt;/code&gt;文件中增加以下代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def keystoreFilepath = &amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def keystorePSW = &amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def keystoreAlias = &amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def keystoreAliasPSW = &amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// default keystore file, PLZ config file path in local.properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def keyfile = file(&amp;apos;s.keystore.temp&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Properties properties = new Properties()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// local.properties file in the root director&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;properties.load(project.rootProject.file(&amp;apos;local.properties&amp;apos;).newDataInputStream())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keystoreFilepath = properties.getProperty(&amp;quot;keystore.path&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (keystoreFilepath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    keystorePSW = properties.getProperty(&amp;quot;keystore.password&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    keystoreAlias = properties.getProperty(&amp;quot;keystore.alias&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    keystoreAliasPSW = properties.getProperty(&amp;quot;keystore.alias_password&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    keyfile = file(keystoreFilepath)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    defaultConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signingConfigs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        myConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            storeFile keyfile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            storePassword keystorePSW&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            keyAlias keystoreAlias&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            keyPassword keystoreAliasPSW&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buildTypes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        release &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (keyfile.exists()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                signingConfig signingConfigs.myConfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就达到了隐藏的目的。&lt;/p&gt;
&lt;p&gt;具体文件分享在了github上，地址：&lt;a href=&quot;https://github.com/dxjia/common-tools/tree/master/android-studio/signature.config&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;signature.config&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;任何一个Android APK 发布之前都会进行签名，没有签名的APK是无法在Android device上进行安装和使用的，而且对于发布到Google Play上的同一个应用，自始至终必须使用同一个签名文件，所以必须保存好签名文件。本文介绍如何在&lt;code&gt;build.gradle&lt;/code&gt;中为release版本配置签名文件，这样在打包release版本时可以自动进行签名。&lt;br&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="Android" scheme="http://dxjia.cn/tags/Android/"/>
    
      <category term="APK" scheme="http://dxjia.cn/tags/APK/"/>
    
      <category term="Gradle" scheme="http://dxjia.cn/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Android 5.0 Default SMS App以及运营商授权SMS App</title>
    <link href="http://dxjia.cn/2016/03/02/android-default-sms-app/"/>
    <id>http://dxjia.cn/2016/03/02/android-default-sms-app/</id>
    <published>2016-03-02T06:37:35.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Android&lt;/strong&gt;中短信的接收是这样的一个过程：：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;底层先将短信报给FW，FW处理过后，会将短信通过intent广播的形式广播出来，而注册了接收短信广播的APP们，就能收到并处理短信。&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Default-SMS-App&quot;&gt;&lt;a href=&quot;#Default-SMS-App&quot; class=&quot;headerlink&quot; title=&quot;Default SMS App&quot;&gt;&lt;/a&gt;Default SMS App&lt;/h1&gt;&lt;p&gt;而android在&lt;strong&gt;&lt;code&gt;4.2&lt;/code&gt;&lt;/strong&gt;开始，对操作SMS的app进行了限制，增加了&lt;code&gt;default SMS APP&lt;/code&gt;的概念，只有default APP才可以操作短信，而且&lt;code&gt;default SMS APP&lt;/code&gt;可以由用户来指定。&lt;/p&gt;
&lt;p&gt;　　先来看看整个系统初始化时，是如何来初始化&lt;code&gt;default SMS APP&lt;/code&gt;的：&lt;/p&gt;
&lt;p&gt;　　依然是在FW的phone框架初始化里，&lt;code&gt;PhoneFactory. makeDefaultPhone&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Ensure that we have a default SMS app. Requesting the app with&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// updateIfNeeded set to true is enough to configure a default SMS app.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ComponentName componentName = SmsApplication.getDefaultSmsApplication(context, true /* updateIfNeeded */);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String packageName = &amp;quot;NONE&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (componentName != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	packageName = componentName.getPackageName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Rlog.i(LOG_TAG, &amp;quot;defaultSmsApplication: &amp;quot; + packageName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Set up monitor to watch for changes to SMS packages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SmsApplication.initSmsPackageMonitor(context);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先调用一次&lt;code&gt;SmsApplication.getDefaultSmsApplication&lt;/code&gt;方法，并且指定第二个参数&lt;code&gt;updateIfNeeded&lt;/code&gt;为&lt;code&gt;true&lt;/code&gt;，就是如果没有设置过就自动指定一个。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Gets the default SMS application&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param context context from the calling app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param updateIfNeeded update the default app if there is no valid default app configured.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @return component name of the app and class to deliver SMS messages to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static ComponentName getDefaultSmsApplication(Context context, boolean updateIfNeeded) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int userId = getIncomingUserId(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final long token = Binder.clearCallingIdentity();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ComponentName component = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SmsApplicationData smsApplicationData = getApplication(context, updateIfNeeded,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                userId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (smsApplicationData != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            component = new ComponentName(smsApplicationData.mPackageName,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    smsApplicationData.mSmsReceiverClass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return component;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Binder.restoreCallingIdentity(token);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于getApplication函数我在 &lt;a href=&quot;http://dxjia.cn/2016/01/29/phone-analysis/&quot;&gt;《Android 5.0 phone初始化分析》&lt;/a&gt; 一文中有讲到，其指定&lt;code&gt;default SMS App&lt;/code&gt;的规则如下：    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先尝试获取用户指定的默认app，对应的系统setting key为：sms_default_application；&lt;/li&gt;
&lt;li&gt;其次看是否有Google的官方 默认sms app；&lt;/li&gt;
&lt;li&gt;如果以上两个都没有，那么就从PM中获取所有注册有完整sms有关的broadcast receiver的app，从中找一个优先级最高的，并将其设定为default app。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;default SMS App&lt;/code&gt;的值保存在setting db中， &lt;code&gt;Settings.Secure.SMS_DEFAULT_APPLICATION&lt;/code&gt;，当然也提供了set方法来让用户可以手动设置他想使用的&lt;code&gt;default SMS App&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Sets the specified package as the default SMS/MMS application. The caller of this method&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * needs to have permission to set AppOps and write to secure settings.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static void setDefaultApplication(String packageName, Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TelephonyManager tm = (TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!tm.isSmsCapable()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // No phone, no SMS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final int userId = getIncomingUserId(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final long token = Binder.clearCallingIdentity();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setDefaultApplicationInternal(packageName, context, userId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Binder.restoreCallingIdentity(token);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另外，在&lt;code&gt;PhoneFactory&lt;/code&gt;初始化里我们还看到在调用一次&lt;code&gt;getDefaultSmsApplication&lt;/code&gt;后，还调用了另外一个方法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SmsApplication.initSmsPackageMonitor(context);&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个方法会监听应用程序的安装与卸载，并在有应用被安装或者移除的时候，能够及时自动更新default sms app，已保证&lt;code&gt;default SMS App&lt;/code&gt;是随时都有设定的。&lt;/p&gt;
&lt;h1 id=&quot;运营商授权SMS-App&quot;&gt;&lt;a href=&quot;#运营商授权SMS-App&quot; class=&quot;headerlink&quot; title=&quot;运营商授权SMS App&quot;&gt;&lt;/a&gt;运营商授权SMS App&lt;/h1&gt;&lt;p&gt;　　后来的版本，android又增加了&lt;code&gt;运营商授权SMS APP&lt;/code&gt;的实现，原则是如果所有的SMS APP里，如果有一个是运营商授权指定的短信处理 APP，那么它就会有第一优先级，不管default app设定的是谁，都会只使用这个授权app来收发和管理显示短信。&lt;br&gt;　　那么这个运营商授权APP是在哪里指定的呢？&lt;strong&gt;&lt;code&gt;答案是：是固化在icc卡里的，也就是运营商给你的手机卡（no-uim和no-sim的手机目前是处理不了的），卡在出厂的时候，会在卡里的某个固定单元文件写上授权APP的package name以及其签名hash校验值，在卡初始化完成后读取这些值解析后保存，如果手机里有这个package name的app，并且签名hash也一致，那么就说明该App是运营商授权sms app。&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;　　完成这些信息初始化的类为 &lt;code&gt;UiccCarrierPrivilegeRules&lt;/code&gt;，其内部完成对卡上文件进行读取和解析，保存信息，并提供对外接口。&lt;br&gt;因为跟卡直接相关，所以&lt;code&gt;UiccCarrierPrivilegeRules&lt;/code&gt;在&lt;code&gt;UiccCard&lt;/code&gt;被创建后初始化。&lt;br&gt;　　在&lt;code&gt;UiccCard.update()&lt;/code&gt;函数里创建：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Reload the carrier privilege rules if necessary.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&lt;span class=&quot;string&quot;&gt;&quot;Before privilege rules: &quot;&lt;/span&gt; + mCarrierPrivilegeRules + &lt;span class=&quot;string&quot;&gt;&quot; : &quot;&lt;/span&gt; + mCardState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mCarrierPrivilegeRules == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; mCardState == CardState.CARDSTATE_PRESENT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mCarrierPrivilegeRules = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; UiccCarrierPrivilegeRules(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mHandler.obtainMessage(EVENT_CARRIER_PRIVILIGES_LOADED));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mCarrierPrivilegeRules != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; mCardState != CardState.CARDSTATE_PRESENT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mCarrierPrivilegeRules = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;UiccCarrierPrivilegeRules&quot;&gt;&lt;a href=&quot;#UiccCarrierPrivilegeRules&quot; class=&quot;headerlink&quot; title=&quot;UiccCarrierPrivilegeRules&quot;&gt;&lt;/a&gt;UiccCarrierPrivilegeRules&lt;/h2&gt;&lt;p&gt;先看看该类的class注释:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Class that reads and stores the carrier privileged rules from the UICC.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The rules are read when the class is created, hence it should only be created&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * after the UICC can be read. And it should be deleted when a UICC is changed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The spec for the rules:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     GP Secure Element Access Control:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     http://www.globalplatform.org/specifications/review/GPD_SE_Access_Control_v1.0.20.pdf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     Extension spec:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *     https://code.google.com/p/seek-for-android/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * TODO: Notifications.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#123;@hide&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在构造函数中开启读取文件的流程，事件驱动。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public UiccCarrierPrivilegeRules(UiccCard uiccCard, Message loadedCallback) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Rlog.d(LOG_TAG, &amp;quot;Creating UiccCarrierPrivilegeRules&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mUiccCard = uiccCard;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mState = new AtomicInteger(STATE_LOADING);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mLoadedCallback = loadedCallback;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Start loading the rules.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mUiccCard.iccOpenLogicalChannel(AID,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        obtainMessage(EVENT_OPEN_LOGICAL_CHANNEL_DONE, null));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注释里对该类的功能进行了讲解，而且给出了使用到的icc card文件读取和解析的spec规范文档 &lt;code&gt;GPD_SE_Access_Control_v1.0.20.pdf&lt;/code&gt;，可惜他给的链接无效了，可以在百度文库上找到该spec，地址: &lt;a href=&quot;http://wenku.baidu.com/link?url=4BZ92HfppXlHIc1jsKw0ob7n0ppdN68qlUq96Yosl124xDM5ab3a_zs84vQSx6bLAONKsN0BQTvDBwRc300X4H_tKnuW2dcY3UhaGxHRdcK&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GPD_SE_Access_Control_v1.0.20.pdf&lt;/a&gt;&lt;br&gt;　　具体读取icc文件和解析这里就不分析了，都是依照spec的实现。只说明下几个接口和内部变量：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Field&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Note&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;AccessRule&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;内部类，用来保存解析到的rules，内部维护单个rule的package name和签名hash值.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;List&lt;accessrule&gt; mAccessRules&lt;/accessrule&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;保存所有的rules在list，看来可以支持多个运营商指定app.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;areCarrierPriviligeRulesLoaded&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是否已经准备好.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;getCarrierPrivilegeStatus&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;验证当前进程里是否存在有运营商授权的app（多个app可以通过共享id的形式运行在同一个进程里.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;getCarrierPrivilegeStatusForCurrentTransaction&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;验证当前进程里是否存在有运营商授权的app.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;getCarrierPackageNamesForIntent&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;通过从package manager中取出所有符合传入的Intent的app，也就是取出所有可以处理传入的Intent的app，并检查这些app里是否有符合运营商授权的，并返回符合的list.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;具体场景&quot;&gt;&lt;a href=&quot;#具体场景&quot; class=&quot;headerlink&quot; title=&quot;具体场景&quot;&gt;&lt;/a&gt;具体场景&lt;/h1&gt;&lt;p&gt;　　以一条新短信的接收为例：&lt;br&gt;　　在&lt;code&gt;InboundSmsHandler&lt;/code&gt;里的&lt;code&gt;processMessagePart()&lt;/code&gt;函数中：　&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;processMessagePart()&lt;/strong&gt;函数用来将缓存的短信分段进行组装，如果已经收全，就会将短信广播出去，当然，如果是单段的独立短信该函数也就直接广播了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来看打包Intent广播的部分：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(Intents.SMS_FILTER_ACTION);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; carrierPackages = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UiccCard card = UiccController.getInstance().getUiccCard();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (card != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    carrierPackages = card.getCarrierPackageNamesForIntent(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mContext.getPackageManager(), intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (carrierPackages != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; carrierPackages.size() == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    intent.setPackage(carrierPackages.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    intent.putExtra(&lt;span class=&quot;string&quot;&gt;&quot;destport&quot;&lt;/span&gt;, destPort);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setAndDirectIntent(intent, destPort);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.putExtra(&lt;span class=&quot;string&quot;&gt;&quot;pdus&quot;&lt;/span&gt;, pdus);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.putExtra(&lt;span class=&quot;string&quot;&gt;&quot;format&quot;&lt;/span&gt;, tracker.getFormat());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatchIntent(intent, android.Manifest.permission.RECEIVE_SMS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AppOpsManager.OP_RECEIVE_SMS, resultReceiver, UserHandle.OWNER);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先是新建一个intent，而这个intent的action直接指定为&lt;strong&gt;&lt;code&gt;Intents.SMS_FILTER_ACTION&lt;/code&gt;&lt;/strong&gt;？这个是什么鬼，以前没见过啊。。。跳转过去：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Broadcast Action: A new text-based SMS message has been received&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * by the device. This intent will only be delivered to a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * carrier app which is responsible for filtering the message.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * If the carrier app wants to drop a message, it should set the result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * code to &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; android.app.Activity#RESULT_CANCELED&amp;#125;. The carrier app can&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * also modify the SMS PDU by setting the &quot;pdus&quot; value in result extras.&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * ....................&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;@SdkConstant&lt;/span&gt;(SdkConstantType.BROADCAST_INTENT_ACTION)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String SMS_FILTER_ACTION =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;string&quot;&gt;&quot;android.provider.Telephony.SMS_FILTER&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注释已经很清晰明了了，这个action只会发送给carrier app，而且carrier app可以通过set result为&lt;code&gt;RESULT_CANCELED&lt;/code&gt;来终止这个广播，这样别的app就永远没有机会收到这个广播了。&lt;/p&gt;
&lt;p&gt;　　回到之前的打包intent的代码，其会去UiccCard里通过 &lt;code&gt;getCarrierPackageNamesForIntent()&lt;/code&gt;方法来得到可以处理&lt;code&gt;SMS_FILTER_ACTION&lt;/code&gt;的符合运营商授权的app name list，如果能取到，那么就将intent的目标package直接设定为那个app，这样这个短信广播就只会发送给这个授权app；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;intent.setPackage(carrierPackages.get(0));&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　而如果没有运营商授权app，那么就会调用&lt;code&gt;setAndDirectIntent (intent, destPort);&lt;/code&gt;来设定广播app，这里才轮到default sms app：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Set the appropriate intent action and direct the intent to the default SMS app or the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * appropriate port.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param intent the intent to set and direct&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param destPort the destination port&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void setAndDirectIntent(Intent intent, int destPort) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (destPort == -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        intent.setAction(Intents.SMS_DELIVER_ACTION);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Direct the intent to only the default SMS app. If we can&amp;apos;t find a default SMS app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // then sent it to all broadcast receivers.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // We are deliberately delivering to the primary user&amp;apos;s default SMS App.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ComponentName componentName = SmsApplication.getDefaultSmsApplication(mContext, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (componentName != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // Deliver SMS message only to this receiver.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            intent.setComponent(componentName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            log(&amp;quot;Delivering SMS to: &amp;quot; + componentName.getPackageName() +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;quot; &amp;quot; + componentName.getClassName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            intent.setComponent(null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        intent.setAction(Intents.DATA_SMS_RECEIVED_ACTION);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Uri uri = Uri.parse(&amp;quot;sms://localhost:&amp;quot; + destPort);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        intent.setData(uri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        intent.setComponent(null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　短信的&lt;code&gt;desPort&lt;/code&gt;都是&lt;strong&gt;-1&lt;/strong&gt;，所以可以只看上面这个if分支，首先先将intent的action修改为&lt;code&gt;Intents.SMS_DELIVER_ACTION&lt;/code&gt;， 这个是android的新短信常规intent action，&lt;strong&gt;顶替&lt;/strong&gt;掉之前的&lt;code&gt;SMS_FILTER_ACTION&lt;/code&gt;；然后通过&lt;code&gt;getDefaultSmsApplication&lt;/code&gt;获取到default sms app，如果能取到，那么通过&lt;code&gt;intent.setComponent(componentName)&lt;/code&gt;设置目标package为这个app，如果没有，那么就&lt;code&gt;setComponent(null)&lt;/code&gt;，这样就可以广播给所有可以接收&lt;strong&gt;SMS_DELIVER_ACTION&lt;/strong&gt;的app。&lt;/p&gt;
&lt;p&gt; 另外，提一点另外的细节，打包广播短信的地方：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dispatchIntent(intent, android.Manifest.permission.RECEIVE_SMS, AppOpsManager.OP_RECEIVE_SMS, &lt;strong&gt;&lt;code&gt;resultReceiver&lt;/code&gt;&lt;/strong&gt;, UserHandle.OWNER);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第4个参数，传入的&lt;code&gt;resultReceiver&lt;/code&gt;，是个内部类SmsBroadcastReceiver对象，用来处理短信广播的结果，对每种intent action广播出去之后的处理结果都有分别处理，如从缓存数据库中删除短信、更新短信状态等。这个广播也用来&lt;code&gt;SMS_DELIVER_ACTION&lt;/code&gt;的广播结束后，重新将短信以&lt;code&gt;SMS_RECEIVED_ACTION&lt;/code&gt;广播出去，下节对其进行说明。&lt;/p&gt;
&lt;h2 id=&quot;三种SMS-ACTION&quot;&gt;&lt;a href=&quot;#三种SMS-ACTION&quot; class=&quot;headerlink&quot; title=&quot;三种SMS ACTION&quot;&gt;&lt;/a&gt;三种SMS ACTION&lt;/h2&gt;&lt;p&gt;所以到目前为止，我们可以看到总共有3种SMS的广播类型，&lt;code&gt;SMS_FILTER_ACTION&lt;/code&gt;，&lt;code&gt;SMS_DELIVER_ACTION&lt;/code&gt;以及&lt;code&gt;SMS_RECEIVED_ACTION&lt;/code&gt;;&lt;br&gt;下面整理出了他们的区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Actions&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Note&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;SMS_FILTER_ACTION&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;运营商SMS APP专用，第一优先级发送，运营商APP可以修改这个短信的任何内容，也可以直接丢弃掉这个短信不让系统保存和继续广播.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;SMS_DELIVER_ACTION&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;第二优先级的广播，该广播会被显式指定给一个default SMS APP接受，而且系统又通过一定的机制保证了同一时刻只会有 &amp;lt;= 1个default SMS APP, 所以这个广播最多只会发送给1个APP，这个APP负责存储和通知新短信.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;SMS_RECEIVED_ACTION&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;最低优先级广播，在 SMS_DELIVER_ACTION 广播结束后触发，不指定APP Name，所以声明了该广播的所有APP都可以接收到新短信广播，注册该广播的应用并不被期望会去存储这条短信到短信数据库.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;所以，如果你要开发一个短信功能的APP，就要注意了，首先&lt;code&gt;SMS_FILTER_ACTION&lt;/code&gt;只针对运营商应用，所以第三方用不了，也不用去管；其次，衡量一下你的SMS APP所要提供的功能，如果你想提供读写系统短信数据库（主要是写，读都可以读，写只有DEFAULT SMS APP可以写）的能力，想提供一个类似系统SMS APP的应用的话，就需要声明&lt;code&gt;SMS_DELIVER_ACTION&lt;/code&gt;，并想办法提示用户把你设置为默认；&lt;br&gt;而如果你仅仅想监控一下你所关心的短信，并不关心保存，那么可以声明最低优先级的&lt;code&gt;SMS_RECEIVED_ACTION&lt;/code&gt;广播，这个广播还能兼容低版本android。。。&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;　　FW初始化时，首先尝试设定一个&lt;code&gt;default SMS APP&lt;/code&gt;，同时，在卡槽的icc卡准备好后，开始读取卡上的运营商授权 APP 数据，并保存下来；新短信接收时首先通过接口获取到运营商授权APP，如果没有，再通过接口获取到default SMS APP，如果还没有，就直接广播啦。&lt;/p&gt;
&lt;p&gt;　　运营商授权app的优先级大于default SMS APP。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Android&lt;/strong&gt;中短信的接收是这样的一个过程：：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;底层先将短信报给FW，FW处理过后，会将短信通过intent广播的形式广播出来，而注册了接收短信广播的APP们，就能收到并处理短信。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="Android" scheme="http://dxjia.cn/tags/Android/"/>
    
      <category term="SMS" scheme="http://dxjia.cn/tags/SMS/"/>
    
  </entry>
  
  <entry>
    <title>百度语音识别(Baidu Voice) Android studio版本</title>
    <link href="http://dxjia.cn/2016/02/29/baidu-voice-helper/"/>
    <id>http://dxjia.cn/2016/02/29/baidu-voice-helper/</id>
    <published>2016-02-29T01:38:03.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;　最近在一个练手小项目里要用到语音识别，搜索了一下，比较容易集成的就算Baidu voice跟讯飞语音了，baidu提供了直接可以使用的显示控件，而讯飞需要自己实现，另外baidu提供每天5W次的调用频率，对于我来说足够使用啦。所以就选择使用Baidu Voice(控件会有baidu logo和关键字，所以正式产品使用要斟酌)。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;　　看了一下baidu提供的android sdk，还是eclipse时代的，如果想要使用他的控件，需要集成他的资源文件到自己的工程目录，还需要在AndroidManifest.xml里增加权限以及activity、service声明等，有些繁琐，而且这些文件夹杂在你的工程里，多少有些凌乱。&lt;br&gt;　　另外，有一点，baidu提供的这个控件必须要自己手动设置提示音文件，不设置的话，sdk会报null point错。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;intent.putExtra(EXTRA_SOUND_START, R.raw.bdspeech_recognition_start);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.putExtra(EXTRA_SOUND_END, R.raw.bdspeech_speech_end);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.putExtra(EXTRA_SOUND_SUCCESS, R.raw.bdspeech_recognition_success);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.putExtra(EXTRA_SOUND_ERROR, R.raw.bdspeech_recognition_error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.putExtra(EXTRA_SOUND_CANCEL, R.raw.bdspeech_recognition_cancel);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　这也是因为目前sdk的jar无法自己包含res文件的原因，所以基于此，我就将他的sdk移植到了android studio上，将这些资源文件以及jar包 so文件统统打包到一个&lt;code&gt;aar文件&lt;/code&gt;，并另外提供了一个接口文件（只有几个接口，用来调用控件），api方式的开发也可以使用这个aar包，因为其内部包含了baidu的jar包，所以baidu的api都是可以引用到的。&lt;/p&gt;
&lt;p&gt;　　库已经分享在github上了，并且也上传到了jcenter，可以通过在build.gradle文件里简单的添加dependencies就可以引用到，不过电脑得联网哦；也可以下载aar包，然后离线使用，具体可以参照我在github上的的readme使用。&lt;br&gt;　　&lt;br&gt;　　GitHub：&lt;a href=&quot;https://github.com/dxjia/BaiduVoiceHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BaiduVoiceHelper&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　最近在一个练手小项目里要用到语音识别，搜索了一下，比较容易集成的就算Baidu voice跟讯飞语音了，baidu提供了直接可以使用的显示控件，而讯飞需要自己实现，另外baidu提供每天5W次的调用频率，对于我来说足够使用啦。所以就选择使用Baidu Voice(控件会有baidu logo和关键字，所以正式产品使用要斟酌)。&lt;br&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="Android" scheme="http://dxjia.cn/tags/Android/"/>
    
      <category term="Java" scheme="http://dxjia.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>PHP的require路径问题</title>
    <link href="http://dxjia.cn/2016/02/25/php-require-path-work-around/"/>
    <id>http://dxjia.cn/2016/02/25/php-require-path-work-around/</id>
    <published>2016-02-25T09:01:15.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;在使用PHP为手机app编写API接口时发现，有时候require文件路径无法正常工作，而且显得莫名其妙，感觉不可思议。后来发现，PHP的require文件路径问题还真的是有点奇葩的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以看下这两篇文章，解释的很详细啦：&lt;br&gt;&lt;a href=&quot;http://cuckoosnest.iteye.com/blog/479401&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cuckoosnest.iteye.com/blog/479401&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/rainman/p/4177302.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/rainman/p/4177302.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也就是说PHP并不是像java或者c++一样，路径永远是相对于当前文件的，那么为了习惯，PHP中也是可以做到的，上面的两篇文章中也都提到啦，方法就是利用&lt;code&gt;__FILE__&lt;/code&gt;这个魔术变量变量构造绝对路径，这样就永远是相对于当前路径来require了。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$currentDir = dirname(__FILE__);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;require_once($currentDir.&amp;apos;/Toro.php&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;require_once($currentDir.&amp;apos;/apikey.php&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;require_once($currentDir.&amp;apos;/ErrorCodes.php&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在使用PHP为手机app编写API接口时发现，有时候require文件路径无法正常工作，而且显得莫名其妙，感觉不可思议。后来发现，PHP的require文件路径问题还真的是有点奇葩的。&lt;br&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="PHP" scheme="http://dxjia.cn/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>如何快速打开Android SDK离线文档</title>
    <link href="http://dxjia.cn/2016/02/05/read-offline-android-api-doc/"/>
    <id>http://dxjia.cn/2016/02/05/read-offline-android-api-doc/</id>
    <published>2016-02-05T07:31:34.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;一般我们更新Android SDK都会附带更新该版本对应的&lt;code&gt;docs&lt;/code&gt;，也就是离线android api文档，但是，但是，尽管是离线的，你会发现在国内打开还是那么慢，就看浏览器一直在那刷。。。这是因为这个离线文档里还有好多脚本会访问google网站，在国内可想而知。。。&lt;/p&gt;
&lt;p&gt;下面就介绍如何&lt;code&gt;秒开&lt;/code&gt;的方法：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你的浏览器是IE，那么直接开启IE的离线模式，再开始浏览文档即可。&lt;br&gt;&lt;img src=&quot;http://7xqitw.com1.z0.glb.clouddn.com/blog/images/read-offline-api-doc4.png&quot; alt=&quot;IE Offline Mode&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你的浏览器不是IE，可以找一下是否有离线模式，自行百度吧。&lt;/p&gt;
&lt;p&gt;我自己用的是google chrome浏览器，可是这浏览器没有离线模式，可以自行找一些插件来曲线救国实现离线模式，这里介绍一下我使用的方法：&lt;/p&gt;
&lt;p&gt;有人专门写了一个插件放在了github上，链接：&lt;a href=&quot;https://github.com/xesam/android_offline_doc_plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/xesam/android_offline_doc_plugin&lt;/a&gt; ，使用方法如下：&lt;/p&gt;
&lt;h2 id=&quot;下载插件&quot;&gt;&lt;a href=&quot;#下载插件&quot; class=&quot;headerlink&quot; title=&quot;下载插件&quot;&gt;&lt;/a&gt;下载插件&lt;/h2&gt;&lt;p&gt;  直接&lt;code&gt;git clone&lt;/code&gt;他的项目，或者&lt;code&gt;Download ZIP&lt;/code&gt;下到本地;&lt;br&gt;  &lt;img src=&quot;http://7xqitw.com1.z0.glb.clouddn.com/blog/images/read-offline-api-doc1.png&quot; alt=&quot;Download ZIP&quot;&gt;&lt;br&gt;  然后将&lt;code&gt;plugin&lt;/code&gt;目录复制到一个安全的地方，下一步需要将它加载到浏览器上，所以如果目录被删，会造成插件不可用，我是放到了 chrome的程序目录下了；&lt;br&gt;  &lt;img src=&quot;http://7xqitw.com1.z0.glb.clouddn.com/blog/images/read-offline-api-doc2.png&quot; alt=&quot;plugin&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;google-chrome-开发者模式安装插件&quot;&gt;&lt;a href=&quot;#google-chrome-开发者模式安装插件&quot; class=&quot;headerlink&quot; title=&quot;google chrome 开发者模式安装插件&quot;&gt;&lt;/a&gt;google chrome 开发者模式安装插件&lt;/h2&gt;&lt;p&gt;  直接参照作者的图，如下&lt;br&gt;  &lt;img src=&quot;http://7xqitw.com1.z0.glb.clouddn.com/blog/images/read-offline-api-doc3.png&quot; alt=&quot;install&quot;&gt;&lt;br&gt;  按照上面的红色圈圈步骤一步步来，第&lt;code&gt;2&lt;/code&gt;步时选择刚刚的&lt;code&gt;plugin&lt;/code&gt;目录；&lt;/p&gt;
&lt;h2 id=&quot;点击插件开启屏蔽模式&quot;&gt;&lt;a href=&quot;#点击插件开启屏蔽模式&quot; class=&quot;headerlink&quot; title=&quot;点击插件开启屏蔽模式&quot;&gt;&lt;/a&gt;点击插件开启屏蔽模式&lt;/h2&gt;&lt;p&gt;  按照上一步操作之后，F5 刷新一下页面，就会有 插件图标了，点击一下，出现红字&lt;code&gt;ON&lt;/code&gt;在图标上时，说明OK了。这时候就可以直接将你的离线文档拖到浏览器里浏览啦。。。&lt;/p&gt;
&lt;p&gt;这样就可以秒开离线文档了，但是。。。这种方式有个缺点就是  &lt;code&gt;搜索功能&lt;/code&gt;是被废掉的。如果想使用搜索，要么科学上网直接访问官网，或者访问国内的一些镜像站，比如 &lt;a href=&quot;http://www.android-doc.com/reference/packages.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.android-doc.com/reference/packages.html&lt;/a&gt; ,但这些站点内容无法保证同步更新的，所以可以两者结合起来看，而如果能科学上网，Android API文档就不是个事啦。。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还是期待 google 回归啊…… &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;[Reference]&lt;/strong&gt;&lt;br&gt;    【Chrome】扩展——Android离线文档 : &lt;a href=&quot;http://my.oschina.net/xesam/blog/283740&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://my.oschina.net/xesam/blog/283740&lt;/a&gt;&lt;br&gt;     插件地址: &lt;a href=&quot;https://github.com/xesam/android_offline_doc_plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/xesam/android_offline_doc_plugin&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一般我们更新Android SDK都会附带更新该版本对应的&lt;code&gt;docs&lt;/code&gt;，也就是离线android api文档，但是，但是，尽管是离线的，你会发现在国内打开还是那么慢，就看浏览器一直在那刷。。。这是因为这个离线文档里还有好多脚本会访问google网站，在国内可想而知。。。&lt;/p&gt;
&lt;p&gt;下面就介绍如何&lt;code&gt;秒开&lt;/code&gt;的方法：&lt;br&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="Android" scheme="http://dxjia.cn/tags/Android/"/>
    
      <category term="API" scheme="http://dxjia.cn/tags/API/"/>
    
      <category term="Doc" scheme="http://dxjia.cn/tags/Doc/"/>
    
  </entry>
  
  <entry>
    <title>为APP添加log自动记录功能</title>
    <link href="http://dxjia.cn/2016/02/03/add-auto-log-recorder/"/>
    <id>http://dxjia.cn/2016/02/03/add-auto-log-recorder/</id>
    <published>2016-02-03T07:01:00.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;在开发APP的时候很多情况下，在编码阶段，开发人员没有时间去做大量测试，主要测试工作还需要放在编码之后，在版本release之后由专业测试人员进行测试，而测试log的保存就变的尤为重要，本文就介绍如果在自己的APP中集成自动记录本APP的log到文件，以方便开发分析。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文最初实现参考自 &lt;a href=&quot;http://blog.csdn.net/way_ping_li/article/details/8487866&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/way_ping_li/article/details/8487866&lt;/a&gt; 这篇文章，对其进行了一些优化和扩展，比如增加保存的文件的大小控制，这样log文件达到一定的大小可以自动另起文件继续进行保存，防止文件太大，影响log分析。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h1&gt;&lt;p&gt;Android手机log的抓取是通过一个logcat进程进行的，比如我们使用数据线连接真机抓取log时，会使用下面的命令进行，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb logcat -v time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb logcat -b radio -v time&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;logcat&lt;/code&gt;是手机中的一个可执行文件，所以我们可以利用新起一个线程，并在线程中通过&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Runtime.getRuntime().exec(logcat command)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;来运行这个logcat，并得到输出记录到文件。。。&lt;/p&gt;
&lt;h1 id=&quot;主要实现&quot;&gt;&lt;a href=&quot;#主要实现&quot; class=&quot;headerlink&quot; title=&quot;主要实现&quot;&gt;&lt;/a&gt;主要实现&lt;/h1&gt;&lt;h2 id=&quot;首先需要增加权限&quot;&gt;&lt;a href=&quot;#首先需要增加权限&quot; class=&quot;headerlink&quot; title=&quot;首先需要增加权限&quot;&gt;&lt;/a&gt;首先需要增加权限&lt;/h2&gt;&lt;p&gt;在AndroidManifest文件中增加以下权限，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.WRITE_EXTERNAL_STORAGE&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.READ_LOGS&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;grep-PID&quot;&gt;&lt;a href=&quot;#grep-PID&quot; class=&quot;headerlink&quot; title=&quot;grep PID&quot;&gt;&lt;/a&gt;grep PID&lt;/h2&gt;&lt;p&gt;自动记录log，我们只需要仅仅记录自己的APP产生的log即可，所以需要通过 grep PID的方式将其他log过滤掉。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;logcat | grep&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h1&gt;&lt;p&gt;源码放在 github上了 : &lt;a href=&quot;https://github.com/dxjia/LogRecorder&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/dxjia/LogRecorder&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h1&gt;&lt;p&gt;直接复制 &lt;a href=&quot;https://github.com/dxjia/LogRecorder/blob/master/LogRecorder.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LogRecorder.java&lt;/a&gt; 文件到你的工程中，使用方式如下：&lt;br&gt;首先在&lt;code&gt;AndroidManifest.xml&lt;/code&gt;中增加权限：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.WRITE_EXTERNAL_STORAGE&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.READ_LOGS&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在代码中合适的地方使用：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LogRecorder logRecorder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 = new LogRecorder.Builder(context)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .setLogFolderName(&amp;quot;foldername&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .setLogFolderPath(&amp;quot;/sdcard/foldername&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .setLogFileNameSuffix(&amp;quot;filesuffix&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .setLogFileSizeLimitation(256)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .setLogLevel(4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .addLogFilterTag(&amp;quot;ActivityManager&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .setPID(android.os.Process.myPid())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logRecorder.start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;setLogFolderName&quot;&gt;&lt;a href=&quot;#setLogFolderName&quot; class=&quot;headerlink&quot; title=&quot;setLogFolderName()&quot;&gt;&lt;/a&gt;setLogFolderName()&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;设定log输出目录名，如果该值与folder path都没有设定的话，会默认使用应用包名在sdcard下新建目录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;setLogFolderPath&quot;&gt;&lt;a href=&quot;#setLogFolderPath&quot; class=&quot;headerlink&quot; title=&quot;setLogFolderPath()&quot;&gt;&lt;/a&gt;setLogFolderPath()&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;设置Log输出目录绝对路径，该值会优先使用，会忽略folder name的设置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;setLogFileNameSuffix&quot;&gt;&lt;a href=&quot;#setLogFileNameSuffix&quot; class=&quot;headerlink&quot; title=&quot;setLogFileNameSuffix()&quot;&gt;&lt;/a&gt;setLogFileNameSuffix()&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;log文件名前缀，文件名会使用时间的形式，该值的设定会自动追加在时间之前，如setLogFileNameSuffix(“mylog”) 则最后的文件名为&lt;code&gt;mylog-2016-02-04-12-26-53.log&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;setLogFileSizeLimitation&quot;&gt;&lt;a href=&quot;#setLogFileSizeLimitation&quot; class=&quot;headerlink&quot; title=&quot;setLogFileSizeLimitation()&quot;&gt;&lt;/a&gt;setLogFileSizeLimitation()&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;单个log文件的大小限制，超过设置的限制时，会自动新起新的文件记录log，&lt;strong&gt;&lt;code&gt;注意&lt;/code&gt;&lt;/strong&gt;: 是以&lt;code&gt;KB&lt;/code&gt;为单位的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;setLogLevel&quot;&gt;&lt;a href=&quot;#setLogLevel&quot; class=&quot;headerlink&quot; title=&quot;setLogLevel()&quot;&gt;&lt;/a&gt;setLogLevel()&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;设置记录的log级别，默认2&lt;br&gt;2 = verbose&lt;br&gt;3 = debug&lt;br&gt;4 = info&lt;br&gt;5 = warning&lt;br&gt;6 = error&lt;br&gt;7 = silent(不输出任何log)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;addLogFilterTag&quot;&gt;&lt;a href=&quot;#addLogFilterTag&quot; class=&quot;headerlink&quot; title=&quot;addLogFilterTag()&quot;&gt;&lt;/a&gt;addLogFilterTag()&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;设置log过滤的tag，可以add多个，如&lt;code&gt;addLogFilterTag(&amp;quot;ActivityManager&amp;quot;)&lt;/code&gt;表示只过滤“ActivityManager”的log &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;setPID&quot;&gt;&lt;a href=&quot;#setPID&quot; class=&quot;headerlink&quot; title=&quot;setPID()&quot;&gt;&lt;/a&gt;setPID()&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;通过该方法可以指定一个特定的进程的log，如通过&lt;code&gt;setPID(android.os.Process.myPid())&lt;/code&gt; 即可只输出自己的APP的log。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/way_ping_li/article/details/8487866&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/way_ping_li/article/details/8487866&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在开发APP的时候很多情况下，在编码阶段，开发人员没有时间去做大量测试，主要测试工作还需要放在编码之后，在版本release之后由专业测试人员进行测试，而测试log的保存就变的尤为重要，本文就介绍如果在自己的APP中集成自动记录本APP的log到文件，以方便开发分析。&lt;br&gt;
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="Android" scheme="http://dxjia.cn/tags/Android/"/>
    
      <category term="Java" scheme="http://dxjia.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>巧用软连接实现不同项目代码共享</title>
    <link href="http://dxjia.cn/2016/02/02/use-softlink-to-share-code-in-windows/"/>
    <id>http://dxjia.cn/2016/02/02/use-softlink-to-share-code-in-windows/</id>
    <published>2016-02-02T00:51:05.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;p&gt;情形是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正在开发一个APP，这个APP向外提供一些服务，也就是一些数据接口，实现了数据的发送、接收，以及数据格式的定义和解析模块；&lt;/li&gt;
&lt;li&gt;想在提供给使用者之前先自己测试一下数据的交互流程，采用的做法是自己再写一个测试APK，来模拟流程；&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;废话了，其实总结来说，就是我有两个APK需要共用一部分核心代码。。。。&lt;/p&gt;
&lt;p&gt;其实方法有好几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把核心部分单独抽出来做成&lt;code&gt;library&lt;/code&gt;，两个项目同时引用；– 这不是我想要的，一来这个APP没有做库的需求，二来还要单独维护，jar包还要拷来拷去。。&lt;/li&gt;
&lt;li&gt;把测试APK作为一个module放到APP的项目里； – 我也不想采用这种，尽管是一个module，但我每次发布APP代码，还要想着去删除，而且我也不需要让别人看到测试APK代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法就剩下一个了，那就是让项目之间直接共用文件，玩过Linux的都知道，Linux家族里有个&lt;code&gt;ln&lt;/code&gt;命令，可以用来给一个目录或文件创建一个&lt;code&gt;软链接&lt;/code&gt;，访问这个链接时，就等同于访问实际的目录。。。。&lt;/p&gt;
&lt;p&gt;那&lt;code&gt;windows&lt;/code&gt;下有没有类似命令呢，答案是&lt;code&gt;有&lt;/code&gt;。。&lt;code&gt;mklink&lt;/code&gt;，使用它，我们可以在我们的测试APK代码目录下，将要使用到的APP那边的代码目录或文件映射过来，这样Android Studio就会看到文件，只有windows知道是软链接。。。。&lt;br&gt;映射目录：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mklink /j d:\目录 源目录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;映射文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mklink 文件名 源文件路径&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不过这种方式，有个缺点，&lt;strong&gt;那就是两边访问的代码是同一个，都是APP那边的，所以在测试APK里，只能使用，可不要修改这些文件哦。。。要不然，APP那边会容易出错的。。。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外，这种方式虽然看起来跟使用&lt;code&gt;快捷方式&lt;/code&gt;差不多，但实际并不一样，测试发现，使用快捷方式，android studio是无法识别出来的。。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;情形是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正在开发一个APP，这个APP向外提供一些服务，也就是一些数据接口，实现了数据的发送、接收，以及数据格式的定义和解析模块；&lt;/li&gt;
&lt;li&gt;想在提供给使用者之前先自己测试一下数据的交互流程，采用的做法是自己再写一个测试APK，来模拟流程；
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="Android" scheme="http://dxjia.cn/tags/Android/"/>
    
      <category term="Windows" scheme="http://dxjia.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Android5.0 Phone框架分析</title>
    <link href="http://dxjia.cn/2016/01/29/phone-analysis/"/>
    <id>http://dxjia.cn/2016/01/29/phone-analysis/</id>
    <published>2016-01-29T12:35:12.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;persistent属性&quot;&gt;&lt;a href=&quot;#persistent属性&quot; class=&quot;headerlink&quot; title=&quot;persistent属性&quot;&gt;&lt;/a&gt;persistent属性&lt;/h1&gt;&lt;p&gt;　　要想了解phone的框架，首先需要了解android app的persistent属性。在AndroidManifest.xml定义中，application有这么一个属性android:persistent，被android:persistent=”true”修饰的应用会在系统启动之后被AM(ActivityManagerService)启动。&lt;br&gt;　　AM首先在systemready后去PM(PackageManagerService)中查找设置了android:persistent的应用，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;systemReady&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Runnable goingCallback)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mFactoryTest != FactoryTest.FACTORY_TEST_LOW_LEVEL) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                List apps = AppGlobals.getPackageManager().&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    getPersistentApplications(STOCK_PM_FLAGS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (apps != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N = apps.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;N; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ApplicationInfo info = (ApplicationInfo)apps.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (info != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !info.packageName.equals(&lt;span class=&quot;string&quot;&gt;&quot;android&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            addAppLocked(info, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* ABI override */&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (RemoteException ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// pm is in same process, this will never happen.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;addAppLocked方法会检测应用是否有起来，如果没有将启动，这样persist属性的应用就跑起来了。注意上面的判断：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;!info.packageName.equals(&amp;quot;android&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为name为android的persist app是 framework-res，所以就排除在外。&lt;/p&gt;
&lt;p&gt;Android5.0中有persistent=true的模块有下面几个：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;./packages/services/Telecomm/AndroidManifest.xml:            android:persistent=”true”&lt;br&gt;./packages/services/Telephony/AndroidManifest.xml:                 android:persistent=”true”&lt;br&gt;./packages/apps/Nfc/AndroidManifest.xml:                 android:persistent=”true”&lt;br&gt;./frameworks/base/packages/FakeOemFeatures/AndroidManifest.xml:        android:persistent=”true”&lt;br&gt;./frameworks/base/packages/Keyguard/AndroidManifest.xml:        android:persistent=”true”&lt;br&gt;./frameworks/base/packages/SystemUI/AndroidManifest.xml:        android:persistent=”true”&lt;br&gt;./frameworks/base/core/res/AndroidManifest.xml:                 android:persistent=”true”&lt;br&gt;./hardware/intel/common/utils/ituxd/AndroidManifest.xml:     android:persistent=”true”&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;跟Telephony框架有关的就是前面两个，Telecom和Telephony，这两个模块的代码位置及在手机中实际编译出的apk如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;./packages/services/Telecom  –  &lt;code&gt;Telecom.apk&lt;/code&gt;&lt;br&gt;./packages/services/Telephony  – &lt;code&gt;Teleservice.apk&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Telephony模块包含全部的PhoneApp及整个Phone框架，而Telecom主要是一些call相关的receiver、activity以及service等，看起来google是想把应用与Phone框架分的开一些，原先都是在一起的，只是从目前5.0的代码来看，还只是弄了一小部分，估计是在进行中，可能后续版本这里还会有变化。&lt;/p&gt;
&lt;h1 id=&quot;Phone框架&quot;&gt;&lt;a href=&quot;#Phone框架&quot; class=&quot;headerlink&quot; title=&quot;Phone框架&quot;&gt;&lt;/a&gt;Phone框架&lt;/h1&gt;&lt;p&gt;从Telephony模块的manifest.xml里可以看出其实他目前还是叫做PhoneApp，这主要是因为之前一直以来Phone框架跟phone app是揉在一起的，估计等以后版本将Telecom和Telephony分的更开的时候，这里就不会叫这个名字啦。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;PhoneApp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;attr&quot;&gt;android:persistent&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;attr&quot;&gt;android:label&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/phoneAppLabel&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;attr&quot;&gt;android:icon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@mipmap/ic_launcher_phone&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;attr&quot;&gt;android:allowBackup&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;attr&quot;&gt;android:supportsRtl&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们先从PhoneApp的启动看起&lt;/p&gt;
&lt;h2 id=&quot;PhoneApp&quot;&gt;&lt;a href=&quot;#PhoneApp&quot; class=&quot;headerlink&quot; title=&quot;PhoneApp&quot;&gt;&lt;/a&gt;PhoneApp&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;(packages\services\telephony\src\com\android\phone)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (UserHandle.myUserId() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// We are running as the primary user, so should bring up the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// global phone state.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mPhoneGlobals = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PhoneGlobals(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mPhoneGlobals.onCreate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mTelephonyGlobals = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TelephonyGlobals(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mTelephonyGlobals.onCreate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;TelephonyGlobals 是5.0新增的，初步来看是跟账户控制以及tty有关的。后面再来研究他的作用，先看PhoneGloabals。&lt;/p&gt;
&lt;h2 id=&quot;PhoneGloabals&quot;&gt;&lt;a href=&quot;#PhoneGloabals&quot; class=&quot;headerlink&quot; title=&quot;PhoneGloabals&quot;&gt;&lt;/a&gt;PhoneGloabals&lt;/h2&gt;&lt;p&gt;PhoneGlobals继承ContextWrapper，而且还是单例，提供全局性的信息，包含的信息很多，下面是其内部管理的关键实例，这些实例相互关联才构建其手机的通信功能。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private static PhoneGlobals sMe;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CallController callController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CallManager mCM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CallNotifier notifier;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CallerInfoCache callerInfoCache;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NotificationMgr notificationMgr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Phone phone;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PhoneInterfaceManager phoneMgr;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看其被PhoneApp.java调用的onCreate函数。&lt;br&gt;创建Phones&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Initialize the telephony framework&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PhoneFactory.makeDefaultPhones(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用工厂模式，创建phones，PhoneFactory提供的都是static方法，所有都是直接静态调用。&lt;/p&gt;
&lt;h3 id=&quot;PhoneFactory&quot;&gt;&lt;a href=&quot;#PhoneFactory&quot; class=&quot;headerlink&quot; title=&quot;PhoneFactory&quot;&gt;&lt;/a&gt;PhoneFactory&lt;/h3&gt;&lt;p&gt;首先看看PhoneFactory维护的本地变量：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static private PhoneProxy[] sProxyPhones = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static private PhoneProxy sProxyPhone = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static private CommandsInterface[] sCommandsInterfaces = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static private ProxyController mProxyController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static private UiccController mUiccController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static private CommandsInterface sCommandsInterface = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static private SubInfoRecordUpdater sSubInfoRecordUpdater = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static private boolean sMadeDefaults = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static private PhoneNotifier sPhoneNotifier;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以注意到sProxyPhones 等几个变量，跟以往的版本比较，已经变成了数组了，这是因为google开始支持双卡啦。。。啦啦啦。。。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 等待底层socket就绪，也就是init创建rild的socket完成；使用for循环+sleep的方式；&lt;/li&gt;
&lt;li&gt;2 创建PhoneNotifier以及获取network mode和cdma subscription;&lt;/li&gt;
&lt;li&gt;3 获取Phone个数设置&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* In case of multi SIM mode two instances of PhoneProxy, RIL are created,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   where as in single SIM mode only instance. isMultiSimEnabled() function checks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   whether it is single SIM or multi SIM mode */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numPhones = TelephonyManager.getDefault().getPhoneCount();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] networkModes = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[numPhones];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           sProxyPhones = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PhoneProxy[numPhones];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           sCommandsInterfaces = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RIL[numPhones];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;getPhoneCount()从setting设置中取:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * Returns the multi SIM variant&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * Returns DSDS for Dual SIM Dual Standby&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * Returns DSDA for Dual SIM Dual Active&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * Returns TSTS for Triple SIM Triple Standby&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * Returns UNKNOWN for others&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@hide&lt;/span&gt;&amp;#125; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; MultiSimVariants &lt;span class=&quot;title&quot;&gt;getMultiSimConfiguration&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String mSimConfig =  SystemProperties.get(TelephonyProperties.PROPERTY_MULTI_SIM_CONFIG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mSimConfig.equals(&lt;span class=&quot;string&quot;&gt;&quot;dsds&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MultiSimVariants.DSDS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mSimConfig.equals(&lt;span class=&quot;string&quot;&gt;&quot;dsda&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MultiSimVariants.DSDA;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mSimConfig.equals(&lt;span class=&quot;string&quot;&gt;&quot;tsts&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MultiSimVariants.TSTS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MultiSimVariants.UNKNOWN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;4 创建对应数量的RIL实例&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; numPhones; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//reads the system properties and makes commandsinterface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sCommandsInterfaces[i] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RIL(context, networkModes[i], cdmaSubscription, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;5 初始化 SubscriptionController 和UiccControler，这两个都是单例设计，这里创建好后，别的地方只需要getInstance进行调用;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;6  创建Phone实例并保存;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; numPhones; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PhoneBase phone = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; phoneType = TelephonyManager.getPhoneType(networkModes[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (phoneType == PhoneConstants.PHONE_TYPE_GSM) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        phone = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GSMPhone(context, sCommandsInterfaces[i], sPhoneNotifier, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (phoneType == PhoneConstants.PHONE_TYPE_CDMA) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        phone = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CDMALTEPhone(context, sCommandsInterfaces[i], sPhoneNotifier, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Rlog.i(LOG_TAG, &lt;span class=&quot;string&quot;&gt;&quot;Creating Phone with type = &quot;&lt;/span&gt; + phoneType + &lt;span class=&quot;string&quot;&gt;&quot; sub = &quot;&lt;/span&gt; + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sProxyPhones[i] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PhoneProxy(phone);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;7 创建ProxyControler&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mProxyController = ProxyController.getInstance(context, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                sProxyPhones, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                mUiccController, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                sCommandsInterfaces);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ProxyController也是5.0新增的，其作用是进行双卡控制，内部实例化对icccard dct(data connction) phonebook 以及sms这些跟卡关系比较密切的功能，如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mDctController = DctController.makeDctController((PhoneProxy[])phoneProxy);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mUiccPhoneBookController = new UiccPhoneBookController(mProxyPhones);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mPhoneSubInfoController = new PhoneSubInfoController(mProxyPhones);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mUiccSmsController = new UiccSmsController(mProxyPhones);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这些实例化的功能，会在各自的构造函数中将接口addService到servicemanager以便供APP调用。实现机制为binder.&lt;/p&gt;
&lt;p&gt;比如UiccSmsController，这里是单实例的，但其内部接口使用带subid参数的方式来支持双卡&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;8 获取默认SMS应用&lt;br&gt;主动调用一次 SmsApplication.getDefaultSmsApplication(context, true );注意第二个参数为true，也就是如果手机没有获取到默认sms app，那么会尝试去设定一个。设定的规则如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.  首先尝试从用户指定的默认app，对应的系统setting key为：sms_default_application；&lt;br&gt;2. 其次看是否有goole的官方 默认sms app；&lt;br&gt;3. 如果以上两个都没有，那么就从PM中获取所有注册有完整sms有关的broadcast receiver的app，从中找一个优先级最高的，并将其设定为default app。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;9 监控短信DefaultApp的变动&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;10 监控Subscription的变化，跟卡有关，用来控制整个FW层对双卡的区分。相关的几个类是：SubscriptionManager  SubscriptionController  SubInfoRecordUpdater，管理default subid等，其default的策略是第一个检测到的可用卡id；当然接口是Public的，也就是暴漏出来的，是可以在需要的地方进行setDefault来改变这个设定的，这些值最终都保存在setting数据库中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，PhoneFactory.makeDefaultPhones完成，接下来再回到PhoneGlobals…&lt;/p&gt;
&lt;h2 id=&quot;Default-Phone&quot;&gt;&lt;a href=&quot;#Default-Phone&quot; class=&quot;headerlink&quot; title=&quot;Default Phone&quot;&gt;&lt;/a&gt;Default Phone&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Get the default phone&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;phone = PhoneFactory.getDefaultPhone();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面创建完phones之后，接下来这里就取出一个defaultphone，这里说明一下default phone的设定，第一次在PhoneFactory中创建出phones之后，将实例保存在数组里;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; PhoneProxy[] sProxyPhones = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//用于保存创建的Phones&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; PhoneProxy sProxyPhone = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;   &lt;span class=&quot;comment&quot;&gt;//用于保存default phone&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;sProxyPhone的第一次赋值只是简单的取 sProxyPhones[0]，但PhoneFactory提供了接口，可以对这个default phone进行设定，接口为：&lt;code&gt;setDefaultSubscription(int subId)&lt;/code&gt;；当然其内部会根据双模的具体情况进行决策，比如如果是双模单通(同一时间只有一个active)，那么default phone会自动设定成那个active的，如果是双模双通，那么就设定成参数值int subId(当然会将subid转换为对应的Phoneid，也就是sProxyPhones数组下标)。&lt;/p&gt;
&lt;h2 id=&quot;创建关键实例&quot;&gt;&lt;a href=&quot;#创建关键实例&quot; class=&quot;headerlink&quot; title=&quot;创建关键实例&quot;&gt;&lt;/a&gt;创建关键实例&lt;/h2&gt;&lt;p&gt;接下来在PhoneGlobals中会创建很多关键实例，依次是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;CallManager&lt;/code&gt;&lt;br&gt;&lt;code&gt;NotificationMgr&lt;/code&gt;&lt;br&gt;&lt;code&gt;PowerManager&lt;/code&gt;&lt;br&gt;&lt;code&gt;KeyguardManager&lt;/code&gt;&lt;br&gt;&lt;code&gt;CallLogger&lt;/code&gt;&lt;br&gt;&lt;code&gt;CallGatewayManager&lt;/code&gt;&lt;br&gt;&lt;code&gt;CallController&lt;/code&gt;&lt;br&gt;&lt;code&gt;CallerInfoCache&lt;/code&gt;&lt;br&gt;&lt;code&gt;BluetoothManager&lt;/code&gt;&lt;br&gt;&lt;code&gt;PhoneInterfaceManager&lt;/code&gt;&lt;br&gt;&lt;code&gt;CallNotifier&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;双模通道打通&quot;&gt;&lt;a href=&quot;#双模通道打通&quot; class=&quot;headerlink&quot; title=&quot;双模通道打通&quot;&gt;&lt;/a&gt;双模通道打通&lt;/h2&gt;&lt;p&gt;上面的初始化过程结束之后，其实已经对各模建立起来各自的通道，尽管5.0还没有彻底支持完整，还是以一个例子来描述流程：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PhoneInterfaceManager&lt;/code&gt;是一个servcie，App可以远程访问其内部的接口，以下面这个接口为例，其实现中提供了一些以subId作为参数的接口，subId是long型，你可以把它看作是卡的身份标识，具体获得过程以后再分析。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;toggleRadioOnOffForSubscriber&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; subId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    enforceModifyPermission();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getPhone(subId).setRadioPower(!isRadioOnForSubscriber(subId));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;GetPhone(subId)会获取到对应的Phone实例，并调用对应phone实例的setRadioPower接口，可惜这里5.0还没有进行实现，只是简单的return defaultPhone&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// returns phone associated with the subId.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// getPhone(0) returns default phone in single SIM mode.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Phone &lt;span class=&quot;title&quot;&gt;getPhone&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; subId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;FIXME:&lt;/span&gt; hack for the moment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mPhone;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// return PhoneUtils.getPhoneForSubscriber(subId);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;前面说过了，会根据phone的个数创建对应数量的&lt;code&gt;RILJ&lt;/code&gt;实例，也就是&lt;code&gt;CommandInterface&lt;/code&gt;实例，并传给具体的Phone实例，CDMAPhone或GsmPhone，而各自的RILJ实例在初始化的时候，又会自动链接上&lt;code&gt;RILD&lt;/code&gt;的对应socket[RILD由init进程启动，并根据&lt;code&gt;init.rc&lt;/code&gt;里的设定创建对应的socket]，那么各自的phone跟底层modem的通信就建立了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      本文从源码角度分析Android phone框架的启动与初始化，总结5.0中新增的framework部分对于多模Phone的支持。
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="Android" scheme="http://dxjia.cn/tags/Android/"/>
    
      <category term="Phone" scheme="http://dxjia.cn/tags/Phone/"/>
    
  </entry>
  
  <entry>
    <title>对Android蓝牙UUID的理解</title>
    <link href="http://dxjia.cn/2016/01/29/android-bluetooth-uuid/"/>
    <id>http://dxjia.cn/2016/01/29/android-bluetooth-uuid/</id>
    <published>2016-01-29T07:42:13.000Z</published>
    <updated>2016-06-24T13:50:39.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;UUID&quot;&gt;&lt;a href=&quot;#UUID&quot; class=&quot;headerlink&quot; title=&quot;UUID&quot;&gt;&lt;/a&gt;UUID&lt;/h1&gt;&lt;p&gt;先来段百度百科上的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UUID含义是通用唯一识别码 (Universally Unique Identifier)，这 是一个软件建构的标准，也是被开源软件基金会 (Open Software Foundation, OSF) 的组织应用在分布式计算环境 (Distributed Computing Environment, DCE) 领域的一部分。它保证对在同一时空中的所有机器都是唯一的。通常平台会提供生成的API。按照开放软件基金会(OSF)制定的标准计算，用到了以太网卡地址、纳秒级时间、芯片ID码和许多可能的数字&lt;br&gt;UUID 的目的，是让分布式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的 UUID。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总结起来就是，UUID是根据一定算法，计算得到的一长串数字，这个数字的产生使用了多种元素，所以使得这串数字不会重复，每次生成都会产生不一样的序列，所以可以用来作为唯一标识。&lt;/p&gt;
&lt;h1 id=&quot;蓝牙RFCOMM数据-SPP-串口-通信&quot;&gt;&lt;a href=&quot;#蓝牙RFCOMM数据-SPP-串口-通信&quot; class=&quot;headerlink&quot; title=&quot;蓝牙RFCOMM数据(SPP 串口)通信&quot;&gt;&lt;/a&gt;蓝牙RFCOMM数据(SPP 串口)通信&lt;/h1&gt;&lt;p&gt;在来看看在蓝牙中为啥会用到UUID。&lt;br&gt;在蓝牙协议中，UUID被用来标识蓝牙设备所提供的服务，&lt;code&gt;并非是标识蓝牙设备本身哦&lt;/code&gt;，一个蓝牙设备可以提供多种服务，比如&lt;code&gt;A2DP&lt;/code&gt;（蓝牙音频传输）、&lt;code&gt;HEADFREE&lt;/code&gt;（免提）、&lt;code&gt;PBAP&lt;/code&gt;(电话本)、&lt;code&gt;SPP&lt;/code&gt;(串口通信)等等，每种服务都对应一个UUID，其中在蓝牙协议栈里，这些默认提供的profile是都有对应的UUID的，也就是默认的UUID，比如&lt;code&gt;SPP&lt;/code&gt;，&lt;code&gt;00001101-0000-1000-8000-00805F9B34FB&lt;/code&gt;就是一个非常 &lt;code&gt;well-known&lt;/code&gt;的UUID，基本上所有的蓝牙板不修改的话都是这个值，所以，如果是与一个蓝牙开发板进行串口通信，而蓝牙侧又不是自己可以控制的，就可以试试这个值。&lt;/p&gt;
&lt;p&gt;当然，我们进行串口通信的开发，一般都会自己同时开发两侧，因为串口传递的数据就是数据流，没有格式之说，具体发送的数据的意义需要自己来定义，就是说自己定义规则，这就要求一端发送的数据，另一端可以理解。两者的通信基于socket进行实现，所以必须有一端做服务端，另一端做客户端。&lt;/p&gt;
&lt;p&gt;再来说下，android里进行蓝牙串口通信的接口，以android端作为客户端为例，也就是对方蓝牙设备作为server端，等着android端来连接。&lt;br&gt;那么android端需要通过&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; BluetoothSocket &lt;span class=&quot;title&quot;&gt;createRfcommSocketToServiceRecord&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(UUID uuid)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个接口来创建一个socket，并用这个socket对connect()，UUID参数类似用来指定socket对应的端口，而server端必须也有在这个UUID上创建好server端socket上监听才可以成功连接上，两者用的UUID必须一样才可以。&lt;/p&gt;
&lt;p&gt;所以UUID的用处就在这里。&lt;/p&gt;
&lt;h1 id=&quot;如何使用UUID&quot;&gt;&lt;a href=&quot;#如何使用UUID&quot; class=&quot;headerlink&quot; title=&quot;如何使用UUID&quot;&gt;&lt;/a&gt;如何使用UUID&lt;/h1&gt;&lt;p&gt;根据上面的描述，要使用蓝牙进行串口通信，前提条件就是两侧都是你可以定义的（如果不可以，那么你可以尝试&lt;code&gt;well-known SPP UUID&lt;/code&gt;，但双方的数据你是没办法控制的），两侧都可以自定义，这样的场景才是使用蓝牙串口通信解决问题的合理场景啊，要不然通信了，互发的数据不认识，没啥用啊。。。。&lt;/p&gt;
&lt;p&gt;所以，这种情况，最好是使用自己生成的UUID，在windows下，命令行里执行&lt;code&gt;uuidgen&lt;/code&gt; 就可以得到一个，类似：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;14c5449a-6267-4c7e-bd10-63dd79740e5d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样的好处就是，只有我们自己的设备可以通信，别人的UUID来连接是连接不上的，我们也不会连接上别人的设备。&lt;/p&gt;
&lt;p&gt;当然，你也可以选择&lt;code&gt;well-known&lt;/code&gt;的UUID，这么干的也不少，这样有个缺点就是可能会有干扰，比如别人的设备也正好使用这个UUID起了个server端，那么我们的设备也使用这个UUID去连，就连上了。。。但。。。互发的数据还是不认识哦，没用。。。。&lt;/p&gt;
&lt;p&gt;本身UUID就是用来标识唯一性的，还是自己生成吧。。。&lt;/p&gt;
&lt;p&gt;附上，Android developer上的一段&lt;code&gt;hint&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;About UUID&lt;br&gt;A Universally Unique Identifier (UUID) is a standardized 128-bit format for a string ID used to uniquely identify information. The point of a UUID is that it’s big enough that you can select any random and it won’t clash. In this case, it’s used to uniquely identify your application’s Bluetooth service. To get a UUID to use with your application, you can use one of the many random UUID generators on the web, then initialize a UUID with fromString(String).&lt;br&gt;Hint: If you are connecting to a Bluetooth serial board then try using the well-known SPP UUID 00001101-0000-1000-8000-00805F9B34FB. However if you are connecting to an Android peer then please generate your own unique UUID.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;意思跟我上面提的差不多。。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      UUID是根据一定算法，计算得到的一长串数字，这个数字的产生使用了多种元素，所以使得这串数字不会重复，每次生成都会产生不一样的序列，所以可以用来作为唯一标识。
    
    </summary>
    
      <category term="Programmer" scheme="http://dxjia.cn/categories/Programmer/"/>
    
    
      <category term="Android" scheme="http://dxjia.cn/tags/Android/"/>
    
      <category term="Bluetooth" scheme="http://dxjia.cn/tags/Bluetooth/"/>
    
      <category term="UUID" scheme="http://dxjia.cn/tags/UUID/"/>
    
  </entry>
  
</feed>
